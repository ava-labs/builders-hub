openapi: 3.1.0
paths:
  /v1/health-check:
    get:
      operationId: data-health-check
      x-speakeasy-name-override: healthCheck
      x-speakeasy-group: data
      summary: Get the health of the service
      description: Check the health of the service.
      responses:
        '200':
          description: The health of the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResultDto'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Health Check
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.healthCheck();

              console.log(result);
            }

            run();
  /v1/address/{address}/chains:
    get:
      operationId: listAddressChains
      x-speakeasy-group: data.evm.address.chains
      x-speakeasy-name-override: list
      summary: List all chains associated with a given address
      description: >-
        Lists the chains where the specified address has  participated in
        transactions or ERC token transfers,  either as a sender or receiver.
        The data is refreshed every 15  minutes.
      parameters:
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddressChainsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Chains
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.evm.address.chains.list({
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              console.log(result);
            }

            run();
  /v1/transactions:
    get:
      operationId: listLatestTransactionsAllChains
      x-speakeasy-group: data.evm.transactions
      x-speakeasy-name-override: listLatestAllChains
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      summary: List the latest transactions across all supported EVM chains
      description: >-
        Lists the most recent transactions from all supported EVM-compatible 
        chains. The results can be filtered based on transaction status.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: status
          required: false
          in: query
          description: A status filter for listed transactions.
          schema:
            $ref: '#/components/schemas/TransactionStatus'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNativeTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.evm.transactions.listLatestAllChains({
                pageSize: 10,
                network: "mainnet",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/blocks:
    get:
      operationId: listLatestBlocksAllChains
      x-speakeasy-group: data.evm.blocks
      x-speakeasy-name-override: listLatestAllChains
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      summary: List latest blocks across all supported EVM chains
      description: >-
        Lists the most recent blocks from all supported  EVM-compatible chains.
        The results can be filtered by network.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEvmBlocksResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Blocks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.evm.blocks.listLatestAllChains({
                pageSize: 10,
                network: "mainnet",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}:reindex:
    post:
      operationId: reindexNft
      x-execution-weight: small
      x-speakeasy-name-override: reindex
      x-speakeasy-usage-example:
        description: Specified example for error responses
        tags:
          - errors
      x-speakeasy-group: data.nfts
      summary: Reindex NFT metadata
      description: >-
        Triggers reindexing of token metadata for an NFT token. Reindexing can
        only be called once per hour for each NFT token.
      parameters:
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Contract address on the relevant chain.
          example: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'
          schema:
            type: string
        - name: tokenId
          required: true
          in: path
          description: TokenId on the contract
          example: '145'
          schema:
            type: string
      responses:
        '201':
          description: Successful response
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - NFTs
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              await avalanche.data.nfts.reindex({
                address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
                tokenId: "145",
              });


            }

            run();
  /v1/chains/{chainId}/nfts/collections/{address}/tokens:
    get:
      operationId: listTokens
      x-speakeasy-name-override: list
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.nfts
      x-execution-weight: medium
      summary: List tokens
      description: Lists tokens for an NFT contract.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Contract address on the relevant chain.
          example: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNftTokens'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - NFTs
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.nfts.list({
                pageSize: 10,
                address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}:
    get:
      operationId: getTokenDetails
      x-speakeasy-name-override: get
      x-speakeasy-group: data.nfts
      x-execution-weight: medium
      summary: Get token details
      description: Gets token details for a specific token of an NFT contract.
      parameters:
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Contract address on the relevant chain.
          example: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'
          schema:
            type: string
        - name: tokenId
          required: true
          in: path
          description: TokenId on the contract
          example: '145'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Erc721Token'
                  - $ref: '#/components/schemas/Erc1155Token'
                discriminator:
                  propertyName: ercType
                  mapping:
                    ERC-721: '#/components/schemas/Erc721Token'
                    ERC-1155: '#/components/schemas/Erc1155Token'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - NFTs
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.nfts.get({
                address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
                tokenId: "145",
              });

              console.log(result);
            }

            run();
  /v1/operations/{operationId}:
    get:
      operationId: getOperationResult
      x-speakeasy-name-override: getResult
      x-execution-weight: small
      x-speakeasy-group: data.operations
      summary: Get operation
      description: Gets operation details for the given operation id.
      parameters:
        - name: operationId
          required: true
          in: path
          description: UUID of given operation
          example: aa22054a-cb7c-4a4e-9b83-59f2ede74138
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Operations
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.operations.getResult({
                operationId: "aa22054a-cb7c-4a4e-9b83-59f2ede74138",
              });

              console.log(result);
            }

            run();
  /v1/operations/transactions:export:
    post:
      operationId: postTransactionExportJob
      x-speakeasy-name-override: exportTransactions
      x-speakeasy-group: data.operations
      x-execution-weight: medium
      summary: Create transaction export operation
      description: >-
        Trigger a transaction export operation with given parameters.


        The transaction export operation runs asynchronously in the background.
        The status of the job can be retrieved from the
        `/v1/operations/:operationId` endpoint using the `operationId` returned
        from this endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateEvmTransactionExportRequest'
                - $ref: >-
                    #/components/schemas/CreatePrimaryNetworkTransactionExportRequest
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationStatusResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Operations
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.operations.exportTransactions({
                type: "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING",
                firstDate: "2023-05-01",
                lastDate: "2023-05-02",
                options: {
                  includeChains: [
                    "p-chain",
                  ],
                },
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/transactions/{txHash}:
    get:
      operationId: getTxByHash
      x-execution-weight: medium
      x-speakeasy-group: data.primaryNetwork.transactions
      x-speakeasy-name-override: get
      summary: Get transaction
      description: >-
        Gets the details of a single transaction on one of the Primary Network
        chains.
      parameters:
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/BlockchainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: txHash
          required: true
          in: path
          description: A primary network (P or X chain) transaction hash.
          example: 3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PChainTransaction'
                  - $ref: '#/components/schemas/XChainNonLinearTransaction'
                  - $ref: '#/components/schemas/XChainLinearTransaction'
                  - $ref: '#/components/schemas/CChainExportTransaction'
                  - $ref: '#/components/schemas/CChainImportTransaction'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.transactions.get({
                blockchainId: "p-chain",
                txHash: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/transactions:
    get:
      operationId: listLatestPrimaryNetworkTransactions
      x-speakeasy-group: data.primaryNetwork.transactions
      x-speakeasy-name-override: listLatest
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: xl
      summary: List latest transactions
      description: >-
        Lists the latest transactions on one of the Primary Network chains.


        Transactions are filterable by addresses, txTypes, and timestamps. When
        querying for latest transactions without an address parameter, filtering
        by txTypes and timestamps is not supported. An address filter must be
        provided to utilize txTypes and timestamp filters.


        For P-Chain, you can fetch all L1 validators related transactions like
        ConvertSubnetToL1Tx, IncreaseL1ValidatorBalanceTx etc. using the unique
        L1 validation ID. These transactions are further filterable by txTypes
        and timestamps as well.


        Given that each transaction may return a large number of UTXO objects,
        bounded only by the maximum transaction size, the query may return less
        transactions than the provided page size. The result will contain less
        results than the page size if the number of utxos contained in the
        resulting transactions reach a performance threshold.
      parameters:
        - name: addresses
          required: false
          in: query
          description: >-
            A comma separated list of X-Chain or P-Chain wallet addresses,
            starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
            Also accepts EVM formatted addresses starting with "0x" for
            C-Chain-related atomic transaction lookups.
          example: avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          schema:
            type: string
        - name: l1ValidationId
          required: false
          in: query
          schema:
            type: string
        - name: txTypes
          required: false
          in: query
          example:
            - AddValidatorTx
          description: Query param for filtering items based on transaction types.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PrimaryNetworkTxType'
        - name: startTimestamp
          required: false
          in: query
          description: Query param for retrieving items after a specific timestamp.
          example: 1689541049
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: Query param for retrieving items before a specific timestamp.
          example: 1689800249
          schema:
            minimum: 0
            type: integer
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/BlockchainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ListPChainTransactionsResponse'
                  - $ref: '#/components/schemas/ListXChainTransactionsResponse'
                  - $ref: '#/components/schemas/ListCChainAtomicTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.transactions.listLatest({
                addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
                txTypes: [
                  "AddValidatorTx",
                ],
                startTimestamp: 1689541049,
                endTimestamp: 1689800249,
                pageSize: 10,
                blockchainId: "p-chain",
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/transactions:listStaking:
    get:
      operationId: listActivePrimaryNetworkStakingTransactions
      x-speakeasy-group: data.primaryNetwork.transactions
      x-speakeasy-name-override: listActiveStakingTransactions
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: xl
      summary: List staking transactions
      description: >-
        Lists active staking transactions on the P-Chain for the supplied
        addresses.
      parameters:
        - name: addresses
          required: false
          in: query
          description: >-
            A comma separated list of X-Chain or P-Chain wallet addresses,
            starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
          example: avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          schema:
            type: string
        - name: txTypes
          required: false
          in: query
          example:
            - AddValidatorTx
          description: Query param for filtering items based on transaction types.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PrimaryNetworkTxType'
        - name: startTimestamp
          required: false
          in: query
          description: Query param for retrieving items after a specific timestamp.
          example: 1689541049
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: Query param for retrieving items before a specific timestamp.
          example: 1689800249
          schema:
            minimum: 0
            type: integer
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/PChainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPChainTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.transactions.listActiveStakingTransactions({
                addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
                txTypes: [
                  "AddValidatorTx",
                ],
                startTimestamp: 1689541049,
                endTimestamp: 1689800249,
                pageSize: 10,
                blockchainId: "p-chain",
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/rewards:listPending:
    get:
      operationId: listPendingPrimaryNetworkRewards
      x-speakeasy-group: data.primaryNetwork.rewards
      x-speakeasy-name-override: listPendingRewards
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: xl
      summary: List pending rewards
      description: Lists pending rewards on the Primary Network for the supplied addresses.
      parameters:
        - name: addresses
          required: false
          in: query
          description: >-
            A comma separated list of X-Chain or P-Chain wallet addresses,
            starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
            One of addresses or nodeIds is required.
          example: avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          schema:
            type: string
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: nodeIds
          required: false
          in: query
          description: >-
            A comma separated list of node ids to filter by. One of addresses or
            nodeIds is required.
          example: NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs
          schema:
            type: string
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPendingRewardsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Rewards
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.rewards.listPendingRewards({
                addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
                pageSize: 10,
                nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs",
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/rewards:
    get:
      operationId: listHistoricalPrimaryNetworkRewards
      x-speakeasy-group: data.primaryNetwork.rewards
      x-speakeasy-name-override: listHistoricalRewards
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: xl
      summary: List historical rewards
      description: >-
        Lists historical rewards on the Primary Network for the supplied
        addresses.
      parameters:
        - name: addresses
          required: false
          in: query
          description: >-
            A comma separated list of X-Chain or P-Chain wallet addresses,
            starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
            Optional, but at least one of addresses or nodeIds is required.
          example: avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          schema:
            type: string
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: nodeIds
          required: false
          in: query
          description: >-
            A comma separated list of node ids to filter by. Optional, but at
            least one of addresses or nodeIds is required.
          example: NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs
          schema:
            type: string
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
        - name: currency
          required: false
          in: query
          description: The currency that return values should use. Defaults to USD.
          example: usd
          schema:
            $ref: '#/components/schemas/CurrencyCode'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHistoricalRewardsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Rewards
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.rewards.listHistoricalRewards({
                addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
                pageSize: 10,
                nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs",
                sortOrder: "asc",
                currency: "usd",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/utxos:
    get:
      operationId: getUtxosByAddresses
      x-speakeasy-group: data.primaryNetwork.utxos
      x-speakeasy-name-override: listByAddresses
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: xl
      summary: List UTXOs
      description: >-
        Lists UTXOs on one of the Primary Network chains for the supplied
        addresses.
      parameters:
        - name: addresses
          required: false
          in: query
          description: >-
            A comma separated list of X-Chain or P-Chain wallet addresses,
            starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
          example: avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          schema:
            type: string
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/BlockchainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: assetId
          required: false
          in: query
          description: Asset ID for any asset (only applicable X-Chain)
          schema:
            type: string
        - name: includeSpent
          required: false
          in: query
          description: Boolean filter to include spent UTXOs.
          schema:
            type: boolean
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ListPChainUtxosResponse'
                  - $ref: '#/components/schemas/ListUtxosResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network UTXOs
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.utxos.listByAddresses({
                addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
                pageSize: 10,
                blockchainId: "p-chain",
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/balances:
    get:
      operationId: getBalancesByAddresses
      x-speakeasy-group: data.primaryNetwork.balances
      x-speakeasy-name-override: listByAddresses
      x-execution-weight: xl
      summary: Get balances
      description: >-
        Gets primary network balances for one of the Primary Network chains for
        the supplied addresses.


        C-Chain balances returned are only the shared atomic memory balance. For
        EVM balance, use the
        `/v1/chains/:chainId/addresses/:addressId/balances:getNative` endpoint.
      parameters:
        - name: blockTimestamp
          required: false
          in: query
          description: >-
            An epoch timestamp in seconds. Balance will be calculated at this
            timestamp.
          example: '1599696000'
          schema:
            type: integer
        - name: addresses
          required: false
          in: query
          description: >-
            A comma separated list of X-Chain or P-Chain wallet addresses,
            starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
          example: avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          schema:
            type: string
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/BlockchainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ListPChainBalancesResponse'
                  - $ref: '#/components/schemas/ListXChainBalancesResponse'
                  - $ref: '#/components/schemas/ListCChainAtomicBalancesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Balances
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.balances.listByAddresses({
                blockTimestamp: 1599696000,
                addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
                blockchainId: "p-chain",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/blocks/{blockId}:
    get:
      operationId: getBlockById
      x-speakeasy-group: data.primaryNetwork.blocks
      x-speakeasy-name-override: get
      x-execution-weight: xl
      summary: Get block
      description: >-
        Gets a block by block height or block hash on one of the Primary Network
        chains.
      parameters:
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/BlockchainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: blockId
          required: true
          in: path
          description: A block identifier which is either a block number or the block hash.
          example: 5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrimaryNetworkBlockResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Blocks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.blocks.get({
                blockchainId: "p-chain",
                blockId: "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/nodes/{nodeId}/blocks:
    get:
      operationId: listPrimaryNetworkBlocksByNodeId
      x-execution-weight: medium
      x-speakeasy-group: data.primaryNetwork.blocks
      x-speakeasy-name-override: listByNodeId
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      summary: List blocks proposed by node
      description: >-
        Lists the latest blocks proposed by a given NodeID on one of the Primary
        Network chains.
      parameters:
        - name: startTimestamp
          required: false
          in: query
          description: Query param for retrieving items after a specific timestamp.
          example: 1689541049
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: Query param for retrieving items before a specific timestamp.
          example: 1689800249
          schema:
            minimum: 0
            type: integer
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/BlockchainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: nodeId
          required: true
          in: path
          description: A primary network (P or X chain) nodeId.
          example: NodeID-111111111111111111116DBWJs
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrimaryNetworkBlocksResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Blocks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.blocks.listByNodeId({
                startTimestamp: 1689541049,
                endTimestamp: 1689800249,
                pageSize: 10,
                blockchainId: "p-chain",
                nodeId: "NodeID-111111111111111111116DBWJs",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/blocks:
    get:
      operationId: listLatestPrimaryNetworkBlocks
      x-execution-weight: medium
      x-speakeasy-group: data.primaryNetwork.blocks
      x-speakeasy-name-override: listLatest
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      summary: List latest blocks
      description: Lists latest blocks on one of the Primary Network chains.
      parameters:
        - name: startTimestamp
          required: false
          in: query
          description: Query param for retrieving items after a specific timestamp.
          example: 1689541049
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: Query param for retrieving items before a specific timestamp.
          example: 1689800249
          schema:
            minimum: 0
            type: integer
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: p-chain
          schema:
            $ref: '#/components/schemas/BlockchainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrimaryNetworkBlocksResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Blocks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.blocks.listLatest({
                startTimestamp: 1689541049,
                endTimestamp: 1689800249,
                pageSize: 10,
                blockchainId: "p-chain",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/vertices:
    get:
      operationId: listLatestXChainVertices
      x-execution-weight: medium
      x-speakeasy-group: data.primaryNetwork.vertices
      x-speakeasy-name-override: listLatest
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      summary: List vertices
      description: Lists latest vertices on the X-Chain.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: x-chain
          schema:
            $ref: '#/components/schemas/XChainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListXChainVerticesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Vertices
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.vertices.listLatest({
                pageSize: 10,
                blockchainId: "x-chain",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/vertices/{vertexHash}:
    get:
      operationId: getVertexByHash
      x-execution-weight: medium
      x-speakeasy-group: data.primaryNetwork.vertices
      x-speakeasy-name-override: getByHash
      summary: Get vertex
      description: Gets a single vertex on the X-Chain.
      parameters:
        - name: vertexHash
          required: true
          in: path
          description: A vertex hash string.
          example: haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr
          schema:
            type: string
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: x-chain
          schema:
            $ref: '#/components/schemas/XChainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XChainVertex'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Vertices
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.vertices.getByHash({
                vertexHash: "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr",
                blockchainId: "x-chain",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/vertices:listByHeight:
    get:
      operationId: getVertexByHeight
      x-execution-weight: medium
      x-speakeasy-group: data.primaryNetwork.vertices
      x-speakeasy-name-override: listByHeight
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      summary: List vertices by height
      description: Lists vertices at the given vertex height on the X-Chain.
      parameters:
        - name: vertexHeight
          required: true
          in: query
          description: The height of a vertex.
          schema:
            type: integer
            minimum: 0
          example: 123
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: x-chain
          schema:
            $ref: '#/components/schemas/XChainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListXChainVerticesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Vertices
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.vertices.listByHeight({
                vertexHeight: 123,
                pageSize: 10,
                blockchainId: "x-chain",
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}:
    get:
      operationId: getAssetDetails
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: xl
      summary: Get asset details
      description: Gets asset details corresponding to the given asset id on the X-Chain.
      parameters:
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: x-chain
          schema:
            $ref: '#/components/schemas/XChainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: assetId
          required: true
          in: path
          description: Asset ID for any asset on X-Chain
          example: th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XChainAssetDetails'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.getAssetDetails({
                blockchainId: "x-chain",
                assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}/transactions:
    get:
      operationId: listAssetTransactions
      x-speakeasy-group: data.primaryNetwork.transactions
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: xl
      summary: List asset transactions
      description: >-
        Lists asset transactions corresponding to the given asset id on the
        X-Chain.
      parameters:
        - name: txTypes
          required: false
          in: query
          example:
            - AddValidatorTx
          description: Query param for filtering items based on transaction types.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PrimaryNetworkTxType'
        - name: startTimestamp
          required: false
          in: query
          description: Query param for retrieving items after a specific timestamp.
          example: 1689541049
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: Query param for retrieving items before a specific timestamp.
          example: 1689800249
          schema:
            minimum: 0
            type: integer
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: blockchainId
          required: true
          in: path
          description: A primary network blockchain id or alias.
          example: x-chain
          schema:
            $ref: '#/components/schemas/XChainId'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: assetId
          required: true
          in: path
          description: Asset ID for any asset on X-Chain
          example: th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListXChainTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.transactions.listAssetTransactions({
                txTypes: [
                  "AddValidatorTx",
                ],
                startTimestamp: 1689541049,
                endTimestamp: 1689800249,
                pageSize: 10,
                blockchainId: "x-chain",
                assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/addresses:listChainIds:
    get:
      operationId: getChainIdsForAddresses
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: xl
      summary: Get chain interactions for addresses
      description: >-
        Returns Primary Network chains that each address has touched in the form
        of an address mapped array. If an address has had any on-chain
        interaction for a chain, that chain's chain id will be returned.
      parameters:
        - name: addresses
          required: true
          in: query
          description: >-
            A comma separated list of X-Chain or P-Chain wallet addresses,
            starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
          example: avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          schema:
            type: string
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainAddressChainIdMapListResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.getChainIdsForAddresses({
                addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}:
    get:
      operationId: getNetworkDetails
      x-execution-weight: xl
      x-speakeasy-group: data.primaryNetwork
      summary: Get network details
      description: Gets network details such as validator and delegator stats.
      parameters:
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNetworkDetailsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.getNetworkDetails({});

              console.log(result);
            }

            run();
  /v1/networks/{network}/blockchains:
    get:
      operationId: listBlockchains
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: List blockchains
      description: Lists all blockchains registered on the network.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 10000.
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 10000
          example: '10'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBlockchainsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.listBlockchains({
                pageSize: 10,
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/blockchains/{blockchainId}:
    get:
      operationId: getBlockchainById
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: Get blockchain details by ID
      description: Get details of the blockchain registered on the network.
      parameters:
        - name: blockchainId
          required: true
          in: path
          description: The blockchain ID of the blockchain to retrieve.
          example: 2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5
          schema:
            type: string
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blockchain'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.getBlockchainById({
                blockchainId: "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/subnets:
    get:
      operationId: listSubnets
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: List subnets
      description: Lists all subnets registered on the network.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 10000.
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 10000
          example: '10'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSubnetsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.listSubnets({
                pageSize: 10,
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/subnets/{subnetId}:
    get:
      operationId: getSubnetById
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: Get Subnet details by ID
      description: Get details of the Subnet registered on the network.
      parameters:
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: subnetId
          required: true
          in: path
          description: Subnet ID to fetch details for
          example: 11111111111111111111111111111111LpoYY
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subnet'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.getSubnetById({
                subnetId: "11111111111111111111111111111111LpoYY",
              });

              console.log(result);
            }

            run();
  /v1/networks/{network}/validators:
    get:
      operationId: listValidators
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: List validators
      description: >-
        Lists details for validators. By default, returns details for all
        validators.  The nodeIds parameter supports substring matching.
        Filterable by validation status, delegation capacity, time remaining,
        fee percentage, uptime performance, and subnet id.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: nodeIds
          required: false
          in: query
          description: >-
            A comma separated list of node ids to filter by. Supports substring
            matching.
          example: NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs
          schema:
            type: string
        - name: sortBy
          required: false
          in: query
          description: >-
            Which property to sort by, in conjunction with sortOrder.


            Note: Delegation fee is only available for mainnet validators. Set
            `subnetId` to `11111111111111111111111111111111LpoYY`  to use this
            option.
          schema:
            $ref: '#/components/schemas/SortByOption'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
        - name: validationStatus
          required: false
          in: query
          description: Validation status of the node.
          example: completed
          schema:
            $ref: '#/components/schemas/ValidationStatusType'
        - name: minDelegationCapacity
          required: false
          in: query
          description: >-
            The minimum delegation capacity, in nAVAX, used to filter the set of
            nodes being returned. Accepts values between 0 and
            720,000,000,000,000,000
          example: '0'
          schema:
            type: string
        - name: maxDelegationCapacity
          required: false
          in: query
          description: >-
            The maximum delegation capacity, in nAVAX, used to filter the set of
            nodes being returned. Accepts values between 0 and
            720,000,000,000,000,000.
          example: '720000000000000000'
          schema:
            type: string
        - name: minTimeRemaining
          required: false
          in: query
          description: >-
            The minimum validation time remaining, in seconds, used to filter
            the set of nodes being returned.
          example: 0
          schema:
            type: number
            maximum: 2147483647
            minimum: 0
        - name: maxTimeRemaining
          required: false
          in: query
          description: >-
            The maximum validation time remaining, in seconds, used to filter
            the set of nodes being returned.
          example: 2147483647
          schema:
            type: number
            maximum: 2147483647
            minimum: 0
        - name: minFeePercentage
          required: false
          in: query
          description: >-
            The minimum fee percentage, used to filter the set of nodes being
            returned. If this field is populated no subnet validations will be
            returned, as their fee percentage is null, since subnet delegations
            are not supported. Default is 2.0, as per the Avalanche spec.
          example: 2
          schema:
            type: number
            maximum: 100
            minimum: 2
        - name: maxFeePercentage
          required: false
          in: query
          description: >-
            The maximum fee percentage, used to filter the set of nodes being
            returned. If this field is populated no subnet validations will be
            returned, as their fee percentage is null, since subnet delegations
            are not supported. Default is 100.0.
          example: 100
          schema:
            type: number
            maximum: 100
            minimum: 2
        - name: minUptimePerformance
          required: false
          in: query
          description: >-
            The minimum node uptime performance percentage, which represents
            node health, used to filter the set of nodes being returned Default
            is 90.
          example: 90
          schema:
            type: number
            maximum: 100
            minimum: 0
        - name: maxUptimePerformance
          required: false
          in: query
          description: >-
            The maximum node uptime performance percentage, which represents
            node health, used to filter the set of nodes being returned. Default
            is 100.
          example: 100
          schema:
            type: number
            maximum: 100
            minimum: 0
        - name: subnetId
          required: false
          in: query
          description: >-
            The subnet ID to filter by. If not provided, then all subnets will
            be returned.
          example: 11111111111111111111111111111111LpoYY
          schema: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListValidatorDetailsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.listValidators({
                pageSize: 10,
                nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs",
                sortOrder: "asc",
                validationStatus: "completed",
                minDelegationCapacity: "0",
                maxDelegationCapacity: "720000000000000000",
                minTimeRemaining: 0,
                maxTimeRemaining: 2147483647,
                minFeePercentage: 2,
                maxFeePercentage: 100,
                minUptimePerformance: 90,
                maxUptimePerformance: 100,
                subnetId: "11111111111111111111111111111111LpoYY",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/validators/{nodeId}:
    get:
      operationId: getSingleValidatorDetails
      x-speakeasy-name-override: getValidatorDetails
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: Get single validator details
      description: >-
        List validator details for a single validator.  Filterable by validation
        status.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: nodeId
          required: true
          in: path
          description: A primary network (P or X chain) nodeId.
          example: NodeID-111111111111111111116DBWJs
          schema:
            type: string
        - name: validationStatus
          required: false
          in: query
          description: Validation status of the node.
          example: completed
          schema:
            $ref: '#/components/schemas/ValidationStatusType'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListValidatorDetailsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.getValidatorDetails({
                pageSize: 10,
                nodeId: "NodeID-111111111111111111116DBWJs",
                validationStatus: "completed",
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/delegators:
    get:
      operationId: listDelegators
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: List delegators
      description: Lists details for delegators.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: rewardAddresses
          required: false
          in: query
          description: A comma separated list of reward addresses to filter by.
          example: >-
            P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc
          schema:
            type: string
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
        - name: delegationStatus
          required: false
          in: query
          description: Delegation status of the node.
          example: completed
          schema:
            $ref: '#/components/schemas/DelegationStatusType'
        - name: nodeIds
          required: false
          in: query
          description: A comma separated list of node ids to filter by.
          example: NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDelegatorDetailsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.listDelegators({
                pageSize: 10,
                rewardAddresses: "P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc",
                sortOrder: "asc",
                delegationStatus: "completed",
                nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/networks/{network}/l1Validators:
    get:
      operationId: listL1Validators
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.primaryNetwork
      x-execution-weight: medium
      summary: List L1 validators
      description: >-
        Lists details for L1 validators. By default, returns details for all
        active L1 validators. Filterable by validator node ids, subnet id, and
        validation id.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: l1ValidationId
          required: false
          in: query
          description: >-
            The L1 Validator's validation ID to filter by. If not provided, then
            all L1 Validators will be returned.
          example: BsSpTd1SDvdhaoYAuKJvRj1WnoRyu8mAuMZeuz9g7brGj6KhX
          schema:
            type: string
        - name: includeInactiveL1Validators
          required: false
          in: query
          schema:
            type: boolean
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: nodeId
          required: false
          in: query
          description: A valid node ID in format 'NodeID-HASH'.
          example: NodeID-111111111111111111116DBWJs
          schema:
            type: string
        - name: subnetId
          required: false
          in: query
          description: >-
            The subnet ID to filter by. If not provided, then all subnets will
            be returned.
          example: 11111111111111111111111111111111LpoYY
          schema: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListL1ValidatorsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Primary Network
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.primaryNetwork.listL1Validators({
                pageSize: 10,
                l1ValidationId: "BsSpTd1SDvdhaoYAuKJvRj1WnoRyu8mAuMZeuz9g7brGj6KhX",
                nodeId: "NodeID-111111111111111111116DBWJs",
                subnetId: "11111111111111111111111111111111LpoYY",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/teleporter/messages/{messageId}:
    get:
      operationId: getTeleporterMessage
      x-speakeasy-group: data.teleporter
      x-execution-weight: medium
      description: >-
        **[Deprecated]** Gets a teleporter message by message ID.


        ⚠️ **This operation will be removed in a future release.  Please use
        /v1/icm/messages/:messageId endpoint instead** .
      deprecated: true
      parameters:
        - name: messageId
          required: true
          in: path
          description: The message ID of the teleporter message.
          example: acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PendingTeleporterMessage'
                  - $ref: '#/components/schemas/DeliveredTeleporterMessage'
                  - $ref: >-
                      #/components/schemas/DeliveredSourceNotIndexedTeleporterMessage
                discriminator:
                  propertyName: status
                  mapping:
                    pending: '#/components/schemas/PendingTeleporterMessage'
                    delivered: '#/components/schemas/DeliveredTeleporterMessage'
                    delivered_source_not_indexed: >-
                      #/components/schemas/DeliveredSourceNotIndexedTeleporterMessage
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Teleporter
  /v1/teleporter/messages:
    get:
      operationId: listTeleporterMessages
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.teleporter
      x-execution-weight: medium
      description: >-
        **[Deprecated]** Lists teleporter messages. Ordered by timestamp in 
        descending order.


        ⚠️ **This operation will be removed in a future release.  Please use
        /v1/icm/messages endpoint instead** .
      deprecated: true
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: sourceBlockchainId
          required: false
          in: query
          description: >-
            The base58 encoded blockchain ID or evm chain ID of the source chain
            that the teleporter message was sent from.
          example: 2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY
          schema:
            type: string
        - name: destinationBlockchainId
          required: false
          in: query
          description: >-
            The base58 encoded blockchain ID or evm chain ID of the destination
            chain that the teleporter message was sent to.
          example: yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp
          schema:
            type: string
        - name: blockchainId
          required: false
          in: query
          description: >-
            The base58 encoded blockchain ID of either source or destination
            chain that one teleporter message interacts with.
          schema:
            type: string
        - name: to
          required: false
          in: query
          description: The address of the recipient of the teleporter message.
          example: '0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC'
          schema:
            type: string
        - name: from
          required: false
          in: query
          description: The address of the sender of the teleporter message.
          example: '0x321eDA69247566D662178feE695C7026c604Cd94'
          schema:
            type: string
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTeleporterMessagesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Teleporter
  /v1/teleporter/addresses/{address}/messages:
    get:
      operationId: listTeleporterMessagesByAddress
      x-speakeasy-group: data.teleporter
      x-execution-weight: medium
      description: >-
        **[Deprecated]** Lists teleporter messages by address. Ordered by 
        timestamp in descending order.


        ⚠️ **This operation will be removed in a future release.  Please use
        /v1/icm/addresses/:address/messages endpoint instead** .
      deprecated: true
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: address
          required: true
          in: path
          description: An EVM address.
          example: '0x8578AE7723751446B196bD5124e1bF57B40EB7Bc'
          schema:
            type: string
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTeleporterMessagesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Teleporter
  /v1/icm/messages/{messageId}:
    get:
      operationId: getIcmMessage
      x-speakeasy-name-override: get
      x-speakeasy-group: data.icm
      x-execution-weight: medium
      summary: Get an ICM message
      description: Gets an ICM message by teleporter message ID.
      parameters:
        - name: messageId
          required: true
          in: path
          description: The teleporter message ID of the ICM message.
          example: acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PendingIcmMessage'
                  - $ref: '#/components/schemas/DeliveredIcmMessage'
                  - $ref: '#/components/schemas/DeliveredSourceNotIndexedIcmMessage'
                discriminator:
                  propertyName: status
                  mapping:
                    pending: '#/components/schemas/PendingIcmMessage'
                    delivered: '#/components/schemas/DeliveredIcmMessage'
                    delivered_source_not_indexed: '#/components/schemas/DeliveredSourceNotIndexedIcmMessage'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Interchain Messaging
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.icm.get({
                messageId: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d",
              });

              console.log(result);
            }

            run();
  /v1/icm/messages:
    get:
      operationId: listIcmMessages
      x-speakeasy-name-override: list
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.icm
      x-execution-weight: medium
      summary: List ICM messages
      description: Lists ICM messages. Ordered by timestamp in descending order.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: sourceBlockchainId
          required: false
          in: query
          description: >-
            The base58 encoded blockchain ID or evm chain ID of the source chain
            that the ICM message was sent from.
          example: 2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY
          schema:
            type: string
        - name: destinationBlockchainId
          required: false
          in: query
          description: >-
            The base58 encoded blockchain ID or evm chain ID of the destination
            chain that the ICM message was sent to.
          example: yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp
          schema:
            type: string
        - name: blockchainId
          required: false
          in: query
          description: >-
            The base58 encoded blockchain ID of either source or destination
            chain that one ICM message interacts with.
          schema:
            type: string
        - name: to
          required: false
          in: query
          description: The address of the recipient of the ICM message.
          example: '0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC'
          schema:
            type: string
        - name: from
          required: false
          in: query
          description: The address of the sender of the ICM message.
          example: '0x321eDA69247566D662178feE695C7026c604Cd94'
          schema:
            type: string
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIcmMessagesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Interchain Messaging
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.icm.list({
                pageSize: 10,
                sourceBlockchainId: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY",
                destinationBlockchainId: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp",
                to: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC",
                from: "0x321eDA69247566D662178feE695C7026c604Cd94",
                network: "mainnet",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/icm/addresses/{address}/messages:
    get:
      operationId: listIcmMessagesByAddress
      x-speakeasy-name-override: listByAddress
      x-speakeasy-group: data.icm
      x-execution-weight: medium
      summary: List ICM messages by address
      description: Lists ICM messages by address. Ordered by timestamp in descending order.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: address
          required: true
          in: path
          description: An EVM address.
          example: '0x8578AE7723751446B196bD5124e1bF57B40EB7Bc'
          schema:
            type: string
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIcmMessagesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Interchain Messaging
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.icm.listByAddress({
                pageSize: 10,
                address: "0x8578AE7723751446B196bD5124e1bF57B40EB7Bc",
                network: "mainnet",
              });

              console.log(result);
            }

            run();
  /v1/apiUsageMetrics:
    get:
      operationId: getApiUsageMetrics
      x-speakeasy-name-override: getUsage
      x-speakeasy-group: data.usageMetrics
      x-execution-weight: xxl
      summary: Get usage metrics for the Data API
      description: >-
        Gets metrics for Data API usage over a specified time interval
        aggregated at the specified time-duration granularity.
      parameters:
        - name: orgId
          required: false
          in: query
          description: Organization ID to fetch usage metrics for
          schema:
            type: string
        - name: startTimestamp
          required: false
          in: query
          description: >-
            The start time of the range as a UNIX timestamp. The requested start
            time  will be rounded down to 0:00 UTC of the day.
          example: 1739507200
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: >-
            The end time of the range as a UNIX timestamp. The requested end
            time will be rounded down to 0:00 UTC of the day.
          example: 1739664000
          schema:
            minimum: 0
            type: integer
        - name: timeInterval
          required: false
          in: query
          description: Time interval granularity for data aggregation
          example: daily
          schema:
            $ref: '#/components/schemas/TimeIntervalGranularityExtended'
        - name: groupBy
          required: false
          in: query
          description: Query param for the criterion used for grouping metrics
          example: requestPath
          schema:
            $ref: '#/components/schemas/UsageMetricsGroupByEnum'
        - name: chainId
          required: false
          in: query
          description: Filter data by chain ID.
          schema:
            type: string
        - name: responseCode
          required: false
          in: query
          description: Filter data by response status code.
          schema:
            type: string
        - name: requestType
          required: false
          in: query
          description: Filter data by request type.
          schema:
            enum:
              - data
              - rpc
            type: string
        - name: apiKeyId
          required: false
          in: query
          description: Filter data by API key ID.
          schema:
            type: string
        - name: requestPath
          required: false
          in: query
          description: Filter data by request path.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageMetricsResponseDTO'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Data API Usage Metrics
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.usageMetrics.getUsage({
                startTimestamp: 1739507200,
                endTimestamp: 1739664000,
                timeInterval: "daily",
                groupBy: "requestPath",
              });

              console.log(result);
            }

            run();
  /v1/apiLogs:
    get:
      operationId: getApiLogs
      x-speakeasy-name-override: getLogs
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.usageMetrics
      x-execution-weight: xxl
      summary: Get logs for requests made by client
      description: >-
        Gets logs for requests made by client over a specified time interval for
        a specific organization.
      parameters:
        - name: orgId
          required: false
          in: query
          description: Organization ID to fetch usage metrics for
          schema:
            type: string
        - name: startTimestamp
          required: false
          in: query
          description: >-
            The start time of the range as a UNIX timestamp. The requested start
            time  will be rounded down to 0:00 UTC of the day.
          example: 1739507200
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: >-
            The end time of the range as a UNIX timestamp. The requested end
            time will be rounded down to 0:00 UTC of the day.
          example: 1739664000
          schema:
            minimum: 0
            type: integer
        - name: chainId
          required: false
          in: query
          description: Filter data by chain ID.
          schema:
            type: string
        - name: responseCode
          required: false
          in: query
          description: Filter data by response status code.
          schema:
            type: string
        - name: requestType
          required: false
          in: query
          description: Filter data by request type.
          schema:
            enum:
              - data
              - rpc
            type: string
        - name: apiKeyId
          required: false
          in: query
          description: Filter data by API key ID.
          schema:
            type: string
        - name: requestPath
          required: false
          in: query
          description: Filter data by request path.
          schema:
            type: string
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: The maximum number of items to return.
          schema:
            minimum: 1
            maximum: 100
            default: 10
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponseDTO'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Data API Usage Metrics
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.usageMetrics.getLogs({
                startTimestamp: 1739507200,
                endTimestamp: 1739664000,
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/subnetRpcUsageMetrics:
    get:
      operationId: getSubnetRpcUsageMetrics
      x-speakeasy-name-override: getSubnetRpcUsage
      x-speakeasy-group: data.usageMetrics
      x-execution-weight: xxl
      summary: Get usage metrics for the Subnet RPC
      description: >-
        Gets metrics for public Subnet RPC usage over a specified time interval
        aggregated at the specified time-duration granularity.
      parameters:
        - name: timeInterval
          required: false
          in: query
          description: |-
            Time interval granularity for data aggregation for subnet
                 rpc metrics
          example: daily
          schema:
            $ref: '#/components/schemas/SubnetRpcTimeIntervalGranularity'
        - name: startTimestamp
          required: false
          in: query
          description: >-
            The start time of the range as a UNIX timestamp. The requested start
            time  will be rounded down to 0:00 UTC of the day.
          example: 1739507200
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: >-
            The end time of the range as a UNIX timestamp. The requested end
            time will be rounded down to 0:00 UTC of the day.
          example: 1739664000
          schema:
            minimum: 0
            type: integer
        - name: groupBy
          required: false
          in: query
          example: rpcMethod
          description: Query param for the criterion used for grouping metrics
          schema:
            $ref: '#/components/schemas/RpcUsageMetricsGroupByEnum'
        - name: chainId
          required: false
          in: query
          description: Filter data by chain ID.
          schema:
            type: string
        - name: responseCode
          required: false
          in: query
          description: Filter data by response status code.
          schema:
            type: string
        - name: rpcMethod
          required: false
          in: query
          description: Filter data by RPC method.
          schema:
            type: string
        - name: rlBypassApiToken
          required: false
          in: query
          description: Filter data by Rl Bypass API Token.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubnetRpcUsageMetricsResponseDTO'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Data API Usage Metrics
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.usageMetrics.getSubnetRpcUsage({
                timeInterval: "daily",
                startTimestamp: 1739507200,
                endTimestamp: 1739664000,
                groupBy: "rpcMethod",
              });

              console.log(result);
            }

            run();
  /v1/rpcUsageMetrics:
    get:
      operationId: getRpcUsageMetrics
      x-speakeasy-group: data.usageMetrics
      x-execution-weight: xxl
      description: >-
        **[Deprecated]**  Gets metrics for public Subnet RPC usage over a
        specified time interval aggregated at the specified time-duration
        granularity.


        ⚠️ **This operation will be removed in a future release.  Please use
        /v1/subnetRpcUsageMetrics endpoint instead**.
      deprecated: true
      parameters:
        - name: timeInterval
          required: false
          in: query
          description: |-
            Time interval granularity for data aggregation for subnet
                 rpc metrics
          example: daily
          schema:
            $ref: '#/components/schemas/SubnetRpcTimeIntervalGranularity'
        - name: startTimestamp
          required: false
          in: query
          description: >-
            The start time of the range as a UNIX timestamp. The requested start
            time  will be rounded down to 0:00 UTC of the day.
          example: 1739507200
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: >-
            The end time of the range as a UNIX timestamp. The requested end
            time will be rounded down to 0:00 UTC of the day.
          example: 1739664000
          schema:
            minimum: 0
            type: integer
        - name: groupBy
          required: false
          in: query
          example: rpcMethod
          description: Query param for the criterion used for grouping metrics
          schema:
            $ref: '#/components/schemas/RpcUsageMetricsGroupByEnum'
        - name: chainId
          required: false
          in: query
          description: Filter data by chain ID.
          schema:
            type: string
        - name: responseCode
          required: false
          in: query
          description: Filter data by response status code.
          schema:
            type: string
        - name: rpcMethod
          required: false
          in: query
          description: Filter data by RPC method.
          schema:
            type: string
        - name: rlBypassApiToken
          required: false
          in: query
          description: Filter data by Rl Bypass API Token.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubnetRpcUsageMetricsResponseDTO'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Data API Usage Metrics
  /v1/primaryNetworkRpcUsageMetrics:
    get:
      operationId: getPrimaryNetworkRpcUsageMetrics
      x-speakeasy-name-override: getPrimaryNetworkRpcUsage
      x-speakeasy-ignore: true
      x-speakeasy-group: data.usageMetrics
      x-execution-weight: xxl
      summary: Get usage metrics for the Primary Network RPC
      description: >-
        Gets metrics for public Primary Network RPC usage over  a specified time
        interval aggregated at the specified  time-duration granularity.
      parameters:
        - name: timeInterval
          required: false
          in: query
          description: |-
            Time interval granularity for data aggregation for subnet
                 rpc metrics
          example: daily
          schema:
            $ref: '#/components/schemas/PrimaryNetworkRpcTimeIntervalGranularity'
        - name: startTimestamp
          required: false
          in: query
          description: >-
            The start time of the range as a UNIX timestamp. The requested start
            time  will be rounded down to 0:00 UTC of the day.
          example: 1739507200
          schema:
            minimum: 0
            type: integer
        - name: endTimestamp
          required: false
          in: query
          description: >-
            The end time of the range as a UNIX timestamp. The requested end
            time will be rounded down to 0:00 UTC of the day.
          example: 1739664000
          schema:
            minimum: 0
            type: integer
        - name: groupBy
          required: false
          in: query
          example: rpcMethod
          description: Query param for the criterion used for grouping metrics
          schema:
            $ref: '#/components/schemas/PrimaryNetworkRpcMetricsGroupByEnum'
        - name: responseCode
          required: false
          in: query
          description: Filter data by response status code.
          schema:
            type: string
        - name: requestPath
          required: false
          in: query
          description: Filter data by request path.
          schema:
            type: string
        - name: country
          required: false
          in: query
          description: >-
            Filter data by Country. Input must be a valid ISO 3166-1 alpha-2
            country code. "XX" - Represents clients without country code data.
            "T1" - Represents clients using the Tor network.
          schema:
            type: string
        - name: continent
          required: false
          in: query
          description: >-
            Filter data by Continent. Input must be a valid ISO 3166-1 alpha-2
            continent code.
          schema:
            type: string
        - name: userAgent
          required: false
          in: query
          description: Filter data by User Agent.
          schema:
            type: string
        - name: rpcMethod
          required: false
          in: query
          description: Filter data by RPC method.
          schema:
            type: string
        - name: network
          required: true
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrimaryNetworkRpcUsageMetricsResponseDTO'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Data API Usage Metrics
  /v1/webhooks:
    post:
      operationId: createWebhook
      x-speakeasy-group: webhooks
      x-speakeasy-name-override: create
      x-execution-weight: medium
      summary: Create a webhook
      description: Create a new webhook.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/EVMAddressActivityRequest'
                - $ref: '#/components/schemas/PrimaryNetworkAddressActivityRequest'
                - $ref: '#/components/schemas/ValidatorActivityRequest'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EVMAddressActivityResponse'
                  - $ref: '#/components/schemas/PrimaryNetworkAddressActivityResponse'
                  - $ref: '#/components/schemas/ValidatorActivityResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.create({
                eventType: "address_activity",
                url: "https://sophisticated-exterior.org/",
                chainId: "<id>",
                metadata: {
                  eventSignatures: [
                    "0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64",
                  ],
                  addresses: [
                    "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
                  ],
                },
              });

              console.log(result);
            }

            run();
    get:
      operationId: listWebhooks
      x-execution-weight: small
      x-speakeasy-group: webhooks
      x-speakeasy-name-override: list
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      summary: List webhooks
      description: Lists webhooks for the user.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: status
          required: false
          in: query
          example: active
          description: >-
            Status of the webhook. Use "active" to return only active webhooks,
            "inactive" to return only inactive webhooks. Else if no status is
            provided, all configured webhooks will be returned.
          schema:
            $ref: '#/components/schemas/WebhookStatus'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWebhooksResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.list({
                pageSize: 10,
                status: "active",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/webhooks/{id}:
    get:
      operationId: getWebhook
      x-execution-weight: small
      x-speakeasy-group: webhooks
      x-speakeasy-name-override: get
      summary: Get a webhook by ID
      description: Retrieves a webhook by ID.
      parameters:
        - name: id
          required: true
          in: path
          description: The webhook identifier.
          example: f33de69c-d13b-4691-908f-870d6e2e6b04
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EVMAddressActivityResponse'
                  - $ref: '#/components/schemas/PrimaryNetworkAddressActivityResponse'
                  - $ref: '#/components/schemas/ValidatorActivityResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.get({
                id: "f33de69c-d13b-4691-908f-870d6e2e6b04",
              });

              console.log(result);
            }

            run();
    delete:
      operationId: deactivateWebhook
      x-speakeasy-group: webhooks
      x-speakeasy-name-override: deactivate
      x-execution-weight: medium
      summary: Deactivate a webhook
      description: Deactivates a webhook by ID.
      parameters:
        - name: id
          required: true
          in: path
          description: The webhook identifier.
          example: f33de69c-d13b-4691-908f-870d6e2e6b04
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EVMAddressActivityResponse'
                  - $ref: '#/components/schemas/PrimaryNetworkAddressActivityResponse'
                  - $ref: '#/components/schemas/ValidatorActivityResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.deactivate({
                id: "f33de69c-d13b-4691-908f-870d6e2e6b04",
              });

              console.log(result);
            }

            run();
    patch:
      operationId: updateWebhook
      x-speakeasy-group: webhooks
      x-speakeasy-name-override: update
      x-execution-weight: medium
      summary: Update a webhook
      description: Updates an existing webhook.
      parameters:
        - name: id
          required: true
          in: path
          description: The webhook identifier.
          example: f33de69c-d13b-4691-908f-870d6e2e6b04
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EVMAddressActivityResponse'
                  - $ref: '#/components/schemas/PrimaryNetworkAddressActivityResponse'
                  - $ref: '#/components/schemas/ValidatorActivityResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.update({
                id: "f33de69c-d13b-4691-908f-870d6e2e6b04",
                updateWebhookRequest: {},
              });

              console.log(result);
            }

            run();
  /v1/webhooks:generateOrRotateSharedSecret:
    post:
      operationId: generateOrRotateSharedSecret
      x-speakeasy-group: webhooks
      x-execution-weight: medium
      summary: Generate or rotate a shared secret
      description: Generates a new shared secret or rotate an existing one.
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedSecretsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.generateOrRotateSharedSecret();

              console.log(result);
            }

            run();
  /v1/webhooks:getSharedSecret:
    get:
      operationId: getSharedSecret
      x-speakeasy-group: webhooks
      x-execution-weight: small
      summary: Get a shared secret
      description: Get a previously generated shared secret.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedSecretsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.getSharedSecret();

              console.log(result);
            }

            run();
  /v1/webhooks/{id}/addresses:
    patch:
      operationId: addAddressesToWebhook
      x-speakeasy-group: webhooks.addresses
      x-speakeasy-name-override: add
      x-execution-weight: medium
      summary: Add addresses to EVM activity webhook
      description: Add addresses to webhook. Only valid for EVM activity webhooks.
      parameters:
        - name: id
          required: true
          in: path
          description: The webhook identifier.
          example: f33de69c-d13b-4691-908f-870d6e2e6b04
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressesChangeRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EVMAddressActivityResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.addresses.add({
                id: "f33de69c-d13b-4691-908f-870d6e2e6b04",
                addressesChangeRequest: {
                  addresses: [
                    "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
                  ],
                },
              });

              console.log(result);
            }

            run();
    delete:
      operationId: removeAddressesFromWebhook
      x-speakeasy-group: webhooks.addresses
      x-speakeasy-name-override: remove
      x-execution-weight: medium
      summary: Remove addresses from EVM activity  webhook
      description: Remove addresses from webhook. Only valid for EVM activity webhooks.
      parameters:
        - name: id
          required: true
          in: path
          description: The webhook identifier.
          example: f33de69c-d13b-4691-908f-870d6e2e6b04
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressesChangeRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EVMAddressActivityResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.addresses.remove({
                id: "f33de69c-d13b-4691-908f-870d6e2e6b04",
                addressesChangeRequest: {
                  addresses: [
                    "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
                  ],
                },
              });

              console.log(result);
            }

            run();
    get:
      operationId: getAddressesFromWebhook
      x-speakeasy-group: webhooks.addresses
      x-speakeasy-name-override: list
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List adresses by EVM activity webhooks
      description: List adresses by webhook. Only valid for EVM activity webhooks.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: id
          required: true
          in: path
          description: The webhook identifier.
          example: f33de69c-d13b-4691-908f-870d6e2e6b04
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWebhookAddressesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Webhooks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.webhooks.addresses.list({
                pageSize: 10,
                id: "f33de69c-d13b-4691-908f-870d6e2e6b04",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/signatureAggregator/{network}/aggregateSignatures:
    post:
      operationId: aggregateSignatures
      x-speakeasy-name-override: aggregate
      x-speakeasy-group: data.signatureAggregator
      x-execution-weight: medium
      summary: Aggregate Signatures
      description: Aggregates Signatures for a Warp message from Subnet validators.
      parameters:
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureAggregatorRequest'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureAggregationResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Signature Aggregator
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.signatureAggregator.aggregate({
                signatureAggregatorRequest: {
                  message: "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003cc0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000",
                  justification: "0001abcdabcfff",
                  signingSubnetId: "7WtoAMPhrmh5KosDUsFL9yTcvw7YSxiKHPpdfs4JsgW47oZT5",
                  quorumPercentage: 50,
                },
              });

              console.log(result);
            }

            run();
  /v1/signatureAggregator/{network}/aggregateSignatures/{txHash}:
    get:
      operationId: getAggregatedSignatures
      x-speakeasy-name-override: get
      x-speakeasy-group: data.signatureAggregator
      x-execution-weight: medium
      summary: Get Aggregated Signatures
      description: Get Aggregated Signatures for a P-Chain L1 related Warp Message.
      parameters:
        - name: network
          required: true
          in: path
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: txHash
          required: true
          in: path
          description: A primary network (P or X chain) transaction hash.
          example: 3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP
          schema:
            type: string
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureAggregationResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - Signature Aggregator
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              network: "mainnet",
            });

            async function run() {
              const result = await avalanche.data.signatureAggregator.get({
                txHash: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP",
              });

              console.log(result);
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/balances:getNative:
    get:
      operationId: getNativeBalance
      x-speakeasy-group: data.evm.address.balances
      x-speakeasy-name-override: getNative
      x-execution-weight: medium
      summary: Get native token balance
      description: >-
        Gets native token balance of a wallet address.


        Balance at a given block can be retrieved with the `blockNumber`
        parameter.
      parameters:
        - name: blockNumber
          required: false
          in: query
          description: >-
            The block number, if not defined the block number will be the latest
            block.
          example: '6479329'
          schema:
            type: string
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
        - name: currency
          required: false
          in: query
          description: The currency that return values should use. Defaults to USD.
          example: usd
          schema:
            $ref: '#/components/schemas/CurrencyCode'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNativeBalanceResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Balances
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.balances.getNative({
                blockNumber: "6479329",
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                currency: "usd",
              });

              console.log(result);
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/balances:listErc20:
    get:
      operationId: listErc20Balances
      x-speakeasy-group: data.evm.address.balances
      x-speakeasy-name-override: listErc20
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List ERC-20 balances
      description: >-
        Lists ERC-20 token balances of a wallet address.


        Balance at a given block can be retrieved with the `blockNumber`
        parameter.


        Balance for specific contracts can be retrieved with the
        `contractAddresses` parameter.
      parameters:
        - name: blockNumber
          required: false
          in: query
          description: >-
            The block number, if not defined the block number will be the latest
            block.
          example: '6479329'
          schema:
            type: string
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 500.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 500
          example: '10'
        - name: filterSpamTokens
          required: false
          in: query
          description: >-
            whether to filter out spam tokens from the response. Default is
            true.
          schema:
            default: true
            type: boolean
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
        - name: contractAddresses
          required: false
          in: query
          description: A comma separated list of contract addresses to filter by.
          example: >-
            0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,
            0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB
          schema:
            type: string
        - name: currency
          required: false
          in: query
          description: The currency that return values should use. Defaults to USD.
          example: usd
          schema:
            $ref: '#/components/schemas/CurrencyCode'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListErc20BalancesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Balances
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.balances.listErc20({
                blockNumber: "6479329",
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                contractAddresses: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",
                currency: "usd",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/balances:listErc721:
    get:
      operationId: listErc721Balances
      x-speakeasy-group: data.evm.address.balances
      x-speakeasy-name-override: listErc721
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List ERC-721 balances
      description: >-
        Lists ERC-721 token balances of a wallet address.


        Balance for a specific contract can be retrieved with the
        `contractAddress` parameter.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 500.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 500
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
        - name: contractAddress
          required: false
          in: query
          description: A contract addresses to filter by.
          example: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListErc721BalancesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Balances
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.balances.listErc721({
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/balances:listErc1155:
    get:
      operationId: listErc1155Balances
      x-speakeasy-group: data.evm.address.balances
      x-speakeasy-name-override: listErc1155
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List ERC-1155 balances
      description: >-
        Lists ERC-1155 token balances of a wallet address.


        Balance at a given block can be retrieved with the `blockNumber`
        parameter.


        Balance for a specific contract can be retrieved with the
        `contractAddress` parameter.
      parameters:
        - name: blockNumber
          required: false
          in: query
          description: >-
            The block number, if not defined the block number will be the latest
            block.
          example: '6479329'
          schema:
            type: string
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 500.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 500
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
        - name: contractAddress
          required: false
          in: query
          description: A contract addresses to filter by.
          example: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListErc1155BalancesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Balances
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.balances.listErc1155({
                blockNumber: "6479329",
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/balances:listCollectibles:
    get:
      operationId: listCollectibleBalances
      x-speakeasy-group: data.evm.address.balances
      x-speakeasy-name-override: listCollectibles
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List collectible (ERC-721/ERC-1155) balances
      description: >-
        Lists ERC-721 and ERC-1155 token balances of a wallet address.


        Balance for a specific contract can be retrieved with the
        `contractAddress` parameter.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 500.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 500
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
        - name: contractAddress
          required: false
          in: query
          description: A contract addresses to filter by.
          example: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectibleBalancesResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Balances
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.balances.listCollectibles({
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/blocks:
    get:
      operationId: getLatestBlocks
      x-speakeasy-name-override: listLatest
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.evm.blocks
      x-execution-weight: small
      summary: List latest blocks
      description: >-
        Lists the latest indexed blocks on the EVM-compatible chain sorted in
        descending order by block timestamp.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEvmBlocksResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Blocks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.blocks.listLatest({
                pageSize: 10,
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/blocks/{blockId}:
    get:
      operationId: getBlock
      x-speakeasy-name-override: get
      x-speakeasy-group: data.evm.blocks
      x-execution-weight: small
      summary: Get block
      description: Gets the details of an individual block on the EVM-compatible chain.
      parameters:
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: blockId
          required: true
          in: path
          description: A block identifier which is either a block number or the block hash.
          example: '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEvmBlockResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Blocks
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.blocks.get({
                blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c",
              });

              console.log(result);
            }

            run();
  /v1/chains/{chainId}/contracts/{address}/transactions:getDeployment:
    get:
      operationId: getDeploymentTransaction
      x-speakeasy-group: data.evm.contracts
      x-execution-weight: medium
      summary: Get deployment transaction
      description: >-
        If the address is a smart contract, returns the transaction in which it
        was deployed.
      parameters:
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Contract address on the relevant chain.
          example: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'
          schema:
            type: string
        - name: currency
          required: false
          in: query
          description: The currency that return values should use. Defaults to USD.
          example: usd
          schema:
            $ref: '#/components/schemas/CurrencyCode'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.contracts.getDeploymentTransaction({
                address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
                currency: "usd",
              });

              console.log(result);
            }

            run();
  /v1/chains/{chainId}/contracts/{address}/deployments:
    get:
      operationId: listContractDeployments
      x-speakeasy-group: data.evm.address.contracts
      x-speakeasy-name-override: listDeployments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List deployed contracts
      description: Lists all contracts deployed by the given address.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContractsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.contracts.listDeployments({
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}:
    get:
      operationId: getContractMetadata
      x-speakeasy-name-override: getMetadata
      x-speakeasy-group: data.evm.contracts
      summary: Get contract metadata
      description: Gets metadata about the contract at the given address.
      parameters:
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Contract address on the relevant chain.
          example: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Erc721Contract'
                  - $ref: '#/components/schemas/Erc1155Contract'
                  - $ref: '#/components/schemas/Erc20Contract'
                  - $ref: '#/components/schemas/UnknownContract'
                discriminator:
                  propertyName: ercType
                  mapping:
                    ERC-721: '#/components/schemas/Erc721Contract'
                    ERC-1155: '#/components/schemas/Erc1155Contract'
                    ERC-20: '#/components/schemas/Erc20Contract'
                    UNKNOWN: '#/components/schemas/UnknownContract'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Contracts
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.contracts.getMetadata({
                address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
              });

              console.log(result);
            }

            run();
  /v1/chains:
    get:
      operationId: supportedChains
      x-speakeasy-name-override: list
      x-speakeasy-group: data.evm.chains
      x-execution-weight: free
      summary: List chains
      description: >-
        Lists the AvaCloud supported EVM-compatible chains. Filterable by
        network.
      parameters:
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: feature
          required: false
          in: query
          description: Filter by feature.
          example: nftIndexing
          schema:
            $ref: '#/components/schemas/ApiFeature'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChainsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Chains
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche();

            async function run() {
              const result = await avalanche.data.evm.chains.list({
                network: "mainnet",
                feature: "nftIndexing",
              });

              console.log(result);
            }

            run();
  /v1/chains/{chainId}:
    get:
      operationId: getChainInfo
      x-speakeasy-name-override: get
      x-speakeasy-group: data.evm.chains
      x-execution-weight: free
      summary: Get chain information
      description: >-
        Gets chain information for the EVM-compatible chain if supported by
        AvaCloud.
      parameters:
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetChainResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Chains
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.chains.get({});

              console.log(result);
            }

            run();
  /v1/chains/address/{address}:
    get:
      operationId: getAddressChains
      x-speakeasy-group: data.evm.chains
      x-execution-weight: free
      description: >-
        **[Deprecated]** Gets a list of all chains where the address was either
        a sender or receiver in a transaction or ERC transfer. The list is
        currently updated every 15 minutes.


        ⚠️ **This operation will be removed in a future release.  Please use
        /v1/address/:address/chains endpoint instead** .
      deprecated: true
      parameters:
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAddressChainsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Chains
  /v1/chains/allTransactions:
    get:
      operationId: listAllLatestTransactions
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.evm.chains
      x-execution-weight: free
      description: >-
        **[Deprecated]** Lists the latest transactions for all supported EVM
        chains. Filterable by status.


        ⚠️ **This operation will be removed in a future release.  Please use
        /v1/transactions endpoint instead** .
      deprecated: true
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
        - name: status
          required: false
          in: query
          description: A status filter for listed transactions.
          schema:
            $ref: '#/components/schemas/TransactionStatus'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNativeTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Chains
  /v1/chains/allBlocks:
    get:
      operationId: listAllLatestBlocks
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-speakeasy-group: data.evm.chains
      x-execution-weight: free
      description: >-
        **[Deprecated]** Lists the latest blocks for all supported EVM chains.
        Filterable by network.


        ⚠️ **This operation will be removed in a future release.  Please use
        /v1/blocks endpoint instead** .
      deprecated: true
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: network
          required: false
          in: query
          description: Either mainnet or testnet/fuji.
          example: mainnet
          schema:
            $ref: '#/components/schemas/Network'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEvmBlocksResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Chains
  /v1/chains/{chainId}/tokens/{address}/transfers:
    get:
      operationId: listTransfers
      x-speakeasy-group: data.evm.contracts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List ERC transfers
      description: >-
        Lists ERC transfers for an ERC-20, ERC-721, or ERC-1155 contract
        address.
      parameters:
        - name: startBlock
          required: false
          in: query
          description: >-
            The block range start number, inclusive. If endBlock is not defined
            when startBlock is defined, the end of the range will be the most
            recent block.
          example: '6479329'
          schema:
            type: number
        - name: endBlock
          required: false
          in: query
          description: >-
            The block range end number, exclusive. If startBlock is not defined
            when endBlock is defined, the start of the range will be the genesis
            block.
          example: '6479330'
          schema:
            type: number
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransfersResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.contracts.listTransfers({
                startBlock: 6479329,
                endBlock: 6479330,
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/transactions:
    get:
      operationId: listTransactions
      x-speakeasy-group: data.evm.address.transactions
      x-speakeasy-name-override: list
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List transactions
      description: >-
        Returns a list of transactions where the given wallet address had an
        on-chain interaction for the given chain. The ERC-20 transfers, ERC-721
        transfers, ERC-1155, and internal transactions returned are only those
        where the input address had an interaction. Specifically, those lists
        only inlcude entries where the input address was the sender (`from`
        field) or the receiver (`to` field) for the sub-transaction. Therefore
        the transactions returned from this list may not be complete
        representations of the on-chain data. For a complete view of a
        transaction use the `/chains/:chainId/transactions/:txHash` endpoint.


        Filterable by block ranges.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: startBlock
          required: false
          in: query
          description: >-
            The block range start number, inclusive. If endBlock is not defined
            when startBlock is defined, the end of the range will be the most
            recent block.
          example: '6479329'
          schema:
            type: number
        - name: endBlock
          required: false
          in: query
          description: >-
            The block range end number, exclusive. If startBlock is not defined
            when endBlock is defined, the start of the range will be the genesis
            block.
          example: '6479330'
          schema:
            type: number
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
        - name: sortOrder
          required: false
          in: query
          example: asc
          description: >-
            The order by which to sort results. Use "asc" for ascending order,
            "desc" for descending order. Sorted by timestamp or the `sortBy`
            query parameter, if provided.
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransactionDetailsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.transactions.list({
                pageSize: 10,
                startBlock: 6479329,
                endBlock: 6479330,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
                sortOrder: "asc",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/transactions:listNative:
    get:
      operationId: listNativeTransactions
      x-speakeasy-group: data.evm.address.transactions
      x-speakeasy-name-override: listNative
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List native transactions
      description: Lists native transactions for an address. Filterable by block range.
      parameters:
        - name: startBlock
          required: false
          in: query
          description: >-
            The block range start number, inclusive. If endBlock is not defined
            when startBlock is defined, the end of the range will be the most
            recent block.
          example: '6479329'
          schema:
            type: number
        - name: endBlock
          required: false
          in: query
          description: >-
            The block range end number, exclusive. If startBlock is not defined
            when endBlock is defined, the start of the range will be the genesis
            block.
          example: '6479330'
          schema:
            type: number
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNativeTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.transactions.listNative({
                startBlock: 6479329,
                endBlock: 6479330,
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/transactions:listErc20:
    get:
      operationId: listErc20Transactions
      x-speakeasy-group: data.evm.address.transactions
      x-speakeasy-name-override: listErc20
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List ERC-20 transfers
      description: Lists ERC-20 transfers for an address. Filterable by block range.
      parameters:
        - name: startBlock
          required: false
          in: query
          description: >-
            The block range start number, inclusive. If endBlock is not defined
            when startBlock is defined, the end of the range will be the most
            recent block.
          example: '6479329'
          schema:
            type: number
        - name: endBlock
          required: false
          in: query
          description: >-
            The block range end number, exclusive. If startBlock is not defined
            when endBlock is defined, the start of the range will be the genesis
            block.
          example: '6479330'
          schema:
            type: number
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListErc20TransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.transactions.listErc20({
                startBlock: 6479329,
                endBlock: 6479330,
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/transactions:listErc721:
    get:
      operationId: listErc721Transactions
      x-speakeasy-group: data.evm.address.transactions
      x-speakeasy-name-override: listErc721
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List ERC-721 transfers
      description: Lists ERC-721 transfers for an address. Filterable by block range.
      parameters:
        - name: startBlock
          required: false
          in: query
          description: >-
            The block range start number, inclusive. If endBlock is not defined
            when startBlock is defined, the end of the range will be the most
            recent block.
          example: '6479329'
          schema:
            type: number
        - name: endBlock
          required: false
          in: query
          description: >-
            The block range end number, exclusive. If startBlock is not defined
            when endBlock is defined, the start of the range will be the genesis
            block.
          example: '6479330'
          schema:
            type: number
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListErc721TransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.transactions.listErc721({
                startBlock: 6479329,
                endBlock: 6479330,
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/transactions:listErc1155:
    get:
      operationId: listErc1155Transactions
      x-speakeasy-group: data.evm.address.transactions
      x-speakeasy-name-override: listErc1155
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List ERC-1155 transfers
      description: Lists ERC-1155 transfers for an address. Filterable by block range.
      parameters:
        - name: startBlock
          required: false
          in: query
          description: >-
            The block range start number, inclusive. If endBlock is not defined
            when startBlock is defined, the end of the range will be the most
            recent block.
          example: '6479329'
          schema:
            type: number
        - name: endBlock
          required: false
          in: query
          description: >-
            The block range end number, exclusive. If startBlock is not defined
            when endBlock is defined, the start of the range will be the genesis
            block.
          example: '6479330'
          schema:
            type: number
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListErc1155TransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.transactions.listErc1155({
                startBlock: 6479329,
                endBlock: 6479330,
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/addresses/{address}/transactions:listInternals:
    get:
      operationId: listInternalTransactions
      x-speakeasy-group: data.evm.address.transactions
      x-speakeasy-name-override: listInternal
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List internal transactions
      description: >-
        Returns a list of internal transactions for an address and chain.
        Filterable by block range.


        Note that the internal transactions list only contains `CALL` or
        `CALLCODE` transactions with a non-zero value and
        `CREATE`/`CREATE2`/`CREATE3` transactions. To get a complete list of
        internal transactions use the `debug_` prefixed RPC methods on an
        archive node.
      parameters:
        - name: startBlock
          required: false
          in: query
          description: >-
            The block range start number, inclusive. If endBlock is not defined
            when startBlock is defined, the end of the range will be the most
            recent block.
          example: '6479329'
          schema:
            type: number
        - name: endBlock
          required: false
          in: query
          description: >-
            The block range end number, exclusive. If startBlock is not defined
            when endBlock is defined, the start of the range will be the genesis
            block.
          example: '6479330'
          schema:
            type: number
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: A wallet address.
          example: '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInternalTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.address.transactions.listInternal({
                startBlock: 6479329,
                endBlock: 6479330,
                pageSize: 10,
                address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
  /v1/chains/{chainId}/transactions/{txHash}:
    get:
      operationId: getTransaction
      x-speakeasy-group: data.evm.transactions
      x-speakeasy-name-override: get
      x-execution-weight: medium
      summary: Get transaction
      description: Gets the details of a single transaction.
      parameters:
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: txHash
          required: true
          in: path
          description: A transaction hash.
          example: '0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.transactions.get({
                txHash: "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45",
              });

              console.log(result);
            }

            run();
  /v1/chains/{chainId}/blocks/{blockId}/transactions:
    get:
      operationId: getTransactionsForBlock
      x-speakeasy-group: data.evm.blocks
      x-speakeasy-name-override: listTransactions
      x-execution-weight: medium
      summary: List transactions for a block
      description: Lists the transactions that occured in a given block.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 0.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: blockId
          required: true
          in: path
          description: A block identifier which is either a block number or the block hash.
          example: '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNativeTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.blocks.listTransactions({
                pageSize: 10,
                blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c",
              });

              console.log(result);
            }

            run();
  /v1/chains/{chainId}/transactions:
    get:
      operationId: listLatestTransactions
      x-speakeasy-group: data.evm.transactions
      x-speakeasy-name-override: listLatest
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: pageToken
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.nextPageToken
      x-execution-weight: medium
      summary: List latest transactions
      description: Lists the latest transactions. Filterable by status.
      parameters:
        - name: pageToken
          required: false
          in: query
          description: >-
            A page token, received from a previous list call. Provide this to
            retrieve the subsequent page.
          schema:
            type: string
        - name: pageSize
          required: false
          in: query
          description: >-
            The maximum number of items to return. The minimum page size is 1.
            The maximum pageSize is 100.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          example: '10'
        - name: chainId
          required: true
          in: path
          description: >-
            A supported evm chain id or blockchain id. Use the `/chains`
            endpoint to get a list of supported chain ids.
          example: '43114'
          schema:
            type: string
        - name: status
          required: false
          in: query
          description: A status filter for listed transactions.
          schema:
            $ref: '#/components/schemas/TransactionStatus'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNativeTransactionsResponse'
        '400':
          description: |-
            Bad requests generally mean the client has passed invalid 
                or malformed parameters. Error messages in the response could help in 
                evaluating the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: |-
            When a client attempts to access resources that require 
                authorization credentials but the client lacks proper authentication 
                in the request, the server responds with 401.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: |-
            When a client attempts to access resources with valid
                credentials but doesn't have the privilege to perform that action, 
                the server responds with 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: |-
            The error is mostly returned when the client requests
                with either mistyped URL, or the passed resource is moved or deleted, 
                or the resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '429':
          description: |-
            This error is returned when the client has sent too many,
                and has hit the rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequests'
        '500':
          description: |-
            The error is a generic server side error that is 
                returned for any uncaught and unexpected issues on the server side. 
                This should be very rare, and you may reach out to us if the problem 
                persists for a longer duration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '502':
          description: |-
            This is an internal error indicating invalid response 
                  received by the client-facing proxy or gateway from the upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGateway'
        '503':
          description: |-
            The error is returned for certain routes on a particular
                Subnet. This indicates an internal problem with our Subnet node, and may 
                not necessarily mean the Subnet is down or affected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailable'
      tags:
        - EVM Transactions
      x-codeSamples:
        - lang: javascript
          label: JavaScript
          source: |-
            import { Avalanche } from "@avalanche-sdk/chainkit";

            const avalanche = new Avalanche({
              chainId: "43114",
            });

            async function run() {
              const result = await avalanche.data.evm.transactions.listLatest({
                pageSize: 10,
              });

              for await (const page of result) {
                console.log(page);
              }
            }

            run();
info:
  title: Data API
  description: >-
    The Data API provides web3 application developers with multi-chain data
    related to Avalanche's primary network, Avalanche subnets, and Ethereum.
    With Data API, you can easily build products that leverage real-time and
    historical transaction and transfer history, native and token balances, and
    various types of token metadata. The API is in Beta and may be subject to
    change.</br></br>If you have feedback or feature requests for the API,
    please submit them <a
    href="https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api">here</a>.
    Bug reports can be submitted <a
    href="https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform">here</a>,
    and any potential security issues can be reported <a
    href="https://immunefi.com/bounty/avalabs">here</a>.
  version: 1.0.0
  contact: {}
tags:
  - name: EVM Chains
    description: >-
      Find information about indexed EVM-compatible chains, such as the
      Avalanche C-Chain.
  - name: EVM Blocks
    description: >-
      Find information about blocks on EVM-compatible chains, such as the
      Avalanche C-Chain.
  - name: EVM Transactions
    description: >-
      Find information about transactions on EVM-compatible chains, such as the
      Avalanche C-Chain.
  - name: EVM Balances
    description: >-
      Find information about balances on EVM-compatible chains, such as the
      Avalanche C-Chain.
  - name: EVM Contracts
    description: >-
      Find information about contracts on EVM-compatible chains, such as the
      Avalanche C-Chain.
  - name: Primary Network
  - name: Primary Network Blocks
    description: >-
      Find information about blocks on Avalanche's Primary Network Chains - the
      P-Chain, the X-Chain, and the C-Chain.
  - name: Primary Network Vertices
    description: Find information about vertices on Avalanche's X-Chain.
  - name: Primary Network Transactions
    description: >-
      Find information about transactions on Avalanche's Primary Network Chains
      - the P-Chain, the X-Chain, and the C-Chain.
  - name: Primary Network Balances
    description: >-
      Find information about balances on Avalanche's Primary Network Chains -
      the P-Chain, the X-Chain, and the C-Chain.
  - name: Primary Network UTXOs
    description: >-
      Find information about utxos on Avalanche's Primary Network Chains - the
      P-Chain, the X-Chain, and the C-Chain.
  - name: Primary Network Rewards
    description: Find information about rewards on Avalanche's Primary Network.
  - name: NFTs
  - name: Operations
  - name: Health Check
  - name: Teleporter
    description: Find information about Teleporter transactions.
  - name: Interchain Messaging
    description: Find information about Interchain Messaging transactions.
  - name: Webhooks
    description: Manage webhooks and get notified for various onchain activities.
  - name: RPC
    description: Interact with chain nodes using JSON-RPC.
  - name: Data API Usage Metrics
    description: Usage metrics and logs for the Data API.
  - name: Signature Aggregator
    description: Request signatures for a Warp message from Subnet validators
  - name: Notifications
    description: Get notifications for validator status and activity issues.
servers:
  - url: https://glacier-api.avax.network
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-glacier-api-key
      description: >-
        Api keys provide higher access to rate limits. To obtain an api key,
        sign up for an account at https://avacloud.io/.
  schemas:
    HealthIndicatorResultDto:
      type: object
      properties:
        status:
          type: string
          enum:
            - up
            - down
          description: Status of the health indicator.
    HealthCheckResultDto:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
            - ok
            - shutting_down
        info:
          type:
            - object
            - 'null'
          additionalProperties:
            $ref: '#/components/schemas/HealthIndicatorResultDto'
            additionalProperties: true
          examples:
            - database:
                status: up
        error:
          type:
            - object
            - 'null'
          additionalProperties:
            $ref: '#/components/schemas/HealthIndicatorResultDto'
            additionalProperties: true
          examples:
            - {}
        details:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/HealthIndicatorResultDto'
            additionalProperties: true
          examples:
            - database:
                status: up
    BadRequest:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 400
        error:
          type: string
          description: The type of error
          examples:
            - Bad Request
      required:
        - message
        - statusCode
        - error
    Unauthorized:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 401
        error:
          type: string
          description: The type of error
          examples:
            - Unauthorized
      required:
        - message
        - statusCode
        - error
    Forbidden:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 403
        error:
          type: string
          description: The type of error
          examples:
            - Forbidden
      required:
        - message
        - statusCode
        - error
    NotFound:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 404
        error:
          type: string
          description: The type of error
          examples:
            - Not Found
      required:
        - message
        - statusCode
        - error
    TooManyRequests:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 429
        error:
          type: string
          description: The type of error
          examples:
            - Too Many Requests
      required:
        - message
        - statusCode
        - error
    InternalServerError:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 500
        error:
          type: string
          description: The type of error
          examples:
            - Internal Server Error
      required:
        - message
        - statusCode
        - error
    BadGateway:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 502
        error:
          type: string
          description: The type of error
          examples:
            - Bad Gateway
      required:
        - message
        - statusCode
        - error
    ServiceUnavailable:
      type: object
      properties:
        message:
          description: The error message describing the reason for the exception
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        statusCode:
          type: number
          description: The HTTP status code of the response
          examples:
            - 503
        error:
          type: string
          description: The type of error
          examples:
            - Service Unavailable
      required:
        - message
        - statusCode
        - error
    ChainStatus:
      type: string
      description: >-
        Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE`
        for several reasons, such as validator stake falling below threshold. If
        chain nodes are `UNAVAILABLE`, requests that rely on data from the chain
        nodes may return 503 errors.
      enum:
        - OK
        - UNAVAILABLE
    VmName:
      type: string
      enum:
        - EVM
        - BITCOIN
        - ETHEREUM
    UtilityAddresses:
      type: object
      properties:
        multicall:
          type: string
    NetworkToken:
      type: object
      properties:
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        logoUri:
          type: string
          description: The logo uri for the address.
          examples:
            - >-
              https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg
        description:
          type: string
      required:
        - name
        - symbol
        - decimals
    ChainInfo:
      type: object
      properties:
        chainId:
          type: string
        status:
          $ref: '#/components/schemas/ChainStatus'
        chainName:
          type: string
        description:
          type: string
        platformChainId:
          type: string
        subnetId:
          type: string
        vmId:
          type: string
        vmName:
          $ref: '#/components/schemas/VmName'
        explorerUrl:
          type: string
        rpcUrl:
          type: string
        wsUrl:
          type: string
        isTestnet:
          type: boolean
        utilityAddresses:
          $ref: '#/components/schemas/UtilityAddresses'
        networkToken:
          $ref: '#/components/schemas/NetworkToken'
        chainLogoUri:
          type: string
        private:
          type: boolean
        enabledFeatures:
          type: array
          items:
            type: string
            enum:
              - nftIndexing
              - webhooks
              - teleporter
      required:
        - chainId
        - status
        - chainName
        - description
        - vmName
        - rpcUrl
        - isTestnet
        - networkToken
    ListAddressChainsResponse:
      type: object
      properties:
        indexedChains:
          type: array
          items:
            $ref: '#/components/schemas/ChainInfo'
        unindexedChains:
          type: array
          items:
            type: string
    Network:
      type: string
      enum:
        - mainnet
        - fuji
        - testnet
    TransactionStatus:
      type: string
      enum:
        - failed
        - success
    RichAddress:
      type: object
      properties:
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        logoUri:
          type: string
          description: The logo uri for the address.
          examples:
            - >-
              https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
      required:
        - address
    TransactionMethodType:
      type: string
      description: >-
        The contract call type. NATIVE_TRANSFER indicates a transfer of the
        native token without any smart-contract interaction. CONTRACT_CALL
        indicates a smart-contract interaction. CONTRACT_CREATION indicates a
        smart-contract creation.
      enum:
        - NATIVE_TRANSFER
        - CONTRACT_CALL
        - CONTRACT_CREATION
    Method:
      type: object
      properties:
        callType:
          examples:
            - CONTRACT_CALL
          $ref: '#/components/schemas/TransactionMethodType'
        methodHash:
          type: string
          description: >-
            The contract method hash identifier. The method hash is only set if
            the `callType` is `CONTRACT_CALL`.
          examples:
            - '0xa9059cbb'
        methodName:
          type: string
          description: >-
            The contract method name including parameter types. If the
            `callType` is `NATIVE_TRANSFER` this is set to 'Native Transfer'. If
            the `callType` is `CONTRACT_CREATION` this is set to 'Contract
            Created'.
          examples:
            - transfer(address,uint256)
      required:
        - callType
        - methodHash
    NativeTransaction:
      type: object
      properties:
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        chainId:
          type: string
          description: The EVM chain ID on which the transaction occured.
          examples:
            - '43114'
        blockIndex:
          type: number
          description: The index at which the transaction occured in the block (0-indexed).
          examples:
            - 0
        txHash:
          type: string
          description: The transaction hash identifier.
          examples:
            - '0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4'
        txStatus:
          type: string
          description: >-
            The transaction status, which is either 0 (failed) or 1
            (successful).
          examples:
            - '1'
        txType:
          type: number
          description: The transaction type.
          examples:
            - 1
        gasLimit:
          type: string
          description: The gas limit set for the transaction.
          examples:
            - '51373'
        gasUsed:
          type: string
          description: The amount of gas used.
          examples:
            - '51373'
        gasPrice:
          type: string
          description: >-
            The gas price denominated by the number of decimals of the native
            token.
          examples:
            - '470000000000'
        nonce:
          type: string
          description: The nonce used by the sender of the transaction.
          examples:
            - '1'
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        method:
          $ref: '#/components/schemas/Method'
        value:
          type: string
          examples:
            - '10000000000000000000'
      required:
        - blockNumber
        - blockTimestamp
        - blockHash
        - chainId
        - blockIndex
        - txHash
        - txStatus
        - txType
        - gasLimit
        - gasUsed
        - gasPrice
        - nonce
        - from
        - to
        - value
    ListNativeTransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/NativeTransaction'
      required:
        - transactions
    EvmBlock:
      type: object
      properties:
        chainId:
          type: string
          description: The EVM chain ID on which the block was created.
          examples:
            - '43114'
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        txCount:
          type: number
          description: The number of evm transactions in the block.
        baseFee:
          type: string
          description: The base gas fee for a transaction to be included in the block.
        gasUsed:
          type: string
          description: The gas used for transactions in the block.
        gasLimit:
          type: string
          description: The total gas limit set for transactions in the block.
        gasCost:
          type: string
        parentHash:
          type: string
          description: The hash of the parent block.
        feesSpent:
          type: string
          description: The amount of fees spent/burned for transactions in the block.
        cumulativeTransactions:
          type: string
          description: >-
            The cumulative number of transactions for the chain including this
            block.
      required:
        - chainId
        - blockNumber
        - blockTimestamp
        - blockHash
        - txCount
        - baseFee
        - gasUsed
        - gasLimit
        - gasCost
        - parentHash
        - feesSpent
        - cumulativeTransactions
    ListEvmBlocksResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/EvmBlock'
      required:
        - blocks
    NftTokenMetadataStatus:
      type: string
      description: The metadata indexing status of the nft.
      enum:
        - UNKNOWN
        - MISSING_TOKEN
        - INVALID_TOKEN_URI
        - INVALID_TOKEN_URI_SCHEME
        - UNREACHABLE_TOKEN_URI
        - THROTTLED_TOKEN_URI
        - METADATA_CONTENT_TOO_LARGE
        - INVALID_METADATA
        - INVALID_METADATA_JSON
        - INDEXED
        - UNINDEXED
    Erc721TokenMetadata:
      type: object
      properties:
        indexStatus:
          examples:
            - indexed
          $ref: '#/components/schemas/NftTokenMetadataStatus'
        metadataLastUpdatedTimestamp:
          type: number
        name:
          type: string
        symbol:
          type: string
        imageUri:
          type: string
        description:
          type: string
        animationUri:
          type: string
        externalUrl:
          type: string
        background:
          type: string
        attributes:
          type: string
      required:
        - indexStatus
    Erc721Token:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        ercType:
          type: string
          enum:
            - ERC-721
        tokenId:
          type: string
        tokenUri:
          type: string
        metadata:
          $ref: '#/components/schemas/Erc721TokenMetadata'
        ownerAddress:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
      required:
        - address
        - name
        - symbol
        - ercType
        - tokenId
        - tokenUri
        - metadata
    Erc1155TokenMetadata:
      type: object
      properties:
        indexStatus:
          examples:
            - indexed
          $ref: '#/components/schemas/NftTokenMetadataStatus'
        metadataLastUpdatedTimestamp:
          type: number
        name:
          type: string
        symbol:
          type: string
        imageUri:
          type: string
        description:
          type: string
        animationUri:
          type: string
        externalUrl:
          type: string
        background:
          type: string
        decimals:
          type: number
        properties:
          type: string
      required:
        - indexStatus
    Erc1155Token:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        ercType:
          type: string
          enum:
            - ERC-1155
        tokenId:
          type: string
        tokenUri:
          type: string
        metadata:
          $ref: '#/components/schemas/Erc1155TokenMetadata'
      required:
        - address
        - ercType
        - tokenId
        - tokenUri
        - metadata
    ListNftTokens:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        tokens:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Erc721Token'
              - $ref: '#/components/schemas/Erc1155Token'
      required:
        - tokens
    OperationStatusCode:
      type: string
      enum:
        - ErrInvalidRequest
        - ErrInternal
        - WarnTruncatedExport
    TransactionExportMetadata:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/OperationStatusCode'
        downloadUrl:
          type: string
          description: >-
            File download URL. Provided only for COMPLETED and
            COMPLETED_WITH_WARNING operations.
        nextDate:
          type: string
          description: >-
            The next date (YYYY-MM-DD) to use as the firstDate in follow up
            requests if a request results in a transaction history exceeding the
            max size and has been reported as `COMPLETED_WITH_WARNING` with the
            warning 'WarnTruncatedExport'.
    OperationType:
      type: string
      enum:
        - TRANSACTION_EXPORT_PRIMARY_NETWORK
        - TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING
        - TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE
        - TRANSACTION_EXPORT_EVM
    OperationStatus:
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - COMPLETED_WITH_WARNING
        - FAILED
    OperationStatusResponse:
      type: object
      properties:
        operationId:
          type: string
        operationType:
          $ref: '#/components/schemas/OperationType'
        operationStatus:
          $ref: '#/components/schemas/OperationStatus'
        message:
          type: string
        metadata:
          oneOf:
            - $ref: '#/components/schemas/TransactionExportMetadata'
        createdAtTimestamp:
          type: number
        updatedAtTimestamp:
          type: number
      required:
        - operationId
        - operationType
        - operationStatus
        - createdAtTimestamp
        - updatedAtTimestamp
    EVMOperationType:
      type: string
      enum:
        - TRANSACTION_EXPORT_EVM
    EvmNetworkOptions:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
        includeChains:
          examples:
            - - '43114'
          type: array
          items:
            type: string
      required:
        - addresses
        - includeChains
    CreateEvmTransactionExportRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EVMOperationType'
        firstDate:
          type: string
          examples:
            - '2023-05-01'
        lastDate:
          type: string
          examples:
            - '2023-05-02'
        startDate:
          type: string
          examples:
            - '2023-05-01'
          deprecated: true
        endDate:
          type: string
          examples:
            - '2023-05-02'
          deprecated: true
        options:
          $ref: '#/components/schemas/EvmNetworkOptions'
      required:
        - type
        - options
    PrimaryNetworkOperationType:
      type: string
      enum:
        - TRANSACTION_EXPORT_PRIMARY_NETWORK
        - TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING
        - TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE
    PrimaryNetworkOptions:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
        cChainEvmAddresses:
          type: array
          items:
            type: string
        includeChains:
          type: array
          examples:
            - - p-chain
          items:
            type: string
            enum:
              - 11111111111111111111111111111111LpoYY
              - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
              - 2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm
              - 2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5
              - yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp
              - p-chain
              - x-chain
              - c-chain
      required:
        - includeChains
    CreatePrimaryNetworkTransactionExportRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PrimaryNetworkOperationType'
        firstDate:
          type: string
          examples:
            - '2023-05-01'
        lastDate:
          type: string
          examples:
            - '2023-05-02'
        startDate:
          type: string
          examples:
            - '2023-05-01'
          deprecated: true
        endDate:
          type: string
          examples:
            - '2023-05-02'
          deprecated: true
        options:
          $ref: '#/components/schemas/PrimaryNetworkOptions'
      required:
        - type
        - options
    PChainTransactionType:
      type: string
      enum:
        - AddValidatorTx
        - AddSubnetValidatorTx
        - AddDelegatorTx
        - CreateChainTx
        - CreateSubnetTx
        - ImportTx
        - ExportTx
        - AdvanceTimeTx
        - RewardValidatorTx
        - RemoveSubnetValidatorTx
        - TransformSubnetTx
        - AddPermissionlessValidatorTx
        - AddPermissionlessDelegatorTx
        - BaseTx
        - TransferSubnetOwnershipTx
        - ConvertSubnetToL1Tx
        - RegisterL1ValidatorTx
        - SetL1ValidatorWeightTx
        - DisableL1ValidatorTx
        - IncreaseL1ValidatorBalanceTx
        - UNKNOWN
    PrimaryNetworkAssetType:
      type: string
      description: Type of asset like SECP256K1 or NFT.
      enum:
        - secp256k1
        - nft
    AssetAmount:
      type: object
      properties:
        assetId:
          type: string
          description: Unique ID for an asset.
          examples:
            - th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
        name:
          type: string
          description: Name of this asset.
          examples:
            - Avalanche
        symbol:
          type: string
          description: Symbol for this asset (max 4 characters).
          examples:
            - AVAX
        denomination:
          type: number
          description: Denomination of this asset to represent fungibility.
          examples:
            - 9
        type:
          examples:
            - secp256k1
          $ref: '#/components/schemas/PrimaryNetworkAssetType'
        amount:
          type: string
          description: Amount of the asset.
          examples:
            - '5001000'
      required:
        - assetId
        - name
        - symbol
        - denomination
        - type
        - amount
    RewardType:
      type: string
      enum:
        - VALIDATOR
        - DELEGATOR
        - VALIDATOR_FEE
    UtxoType:
      type: string
      description: Indicates whether the UTXO is staked or transferable
      enum:
        - STAKE
        - TRANSFER
    PChainUtxo:
      type: object
      properties:
        addresses:
          description: Addresses that are eligible to sign the consumption of this output.
          examples:
            - - avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw
          type: array
          items:
            type: string
        asset:
          $ref: '#/components/schemas/AssetAmount'
        consumedOnChainId:
          type: string
          description: Blockchain ID on which this output is consumed on.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        consumingTxHash:
          type: string
          description: Transaction ID that consumed this output.
          examples:
            - 3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c
        createdOnChainId:
          type: string
          description: Blockchain ID on which this output is created on.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        utxoId:
          type: string
          description: UTXO ID for this output.
          examples:
            - 68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC
        amount:
          type: string
          deprecated: true
        assetId:
          type: string
          deprecated: true
        blockNumber:
          type: string
        blockTimestamp:
          type: number
        consumingBlockNumber:
          type: string
          description: >-
            Block height in which the transaction consuming this UTXO was
            included
        consumingBlockTimestamp:
          type: number
          description: >-
            Timestamp in seconds at which this UTXO is used in a consuming
            transaction
        platformLocktime:
          type: number
          description: Timestamp in seconds after which this UTXO can be consumed
        outputIndex:
          type: number
          description: The index of the UTXO in the transaction
        rewardType:
          $ref: '#/components/schemas/RewardType'
        stakeableLocktime:
          type: number
          description: >-
            Timestamp in seconds before which a UTXO can only be used for
            staking transactions. After stakeable locktime, a UTXO can be used
            for anything
        staked:
          type: boolean
        threshold:
          type: number
          description: The minimum number of signatures required to spend this UTXO
        txHash:
          type: string
          description: The hash of the transaction that created this UTXO
        utxoEndTimestamp:
          type: number
          description: Timestamp in seconds after which the staked UTXO will be unlocked.
        utxoStartTimestamp:
          type: number
          description: Timestamp in seconds at which the staked UTXO was locked.
        utxoType:
          $ref: '#/components/schemas/UtxoType'
      required:
        - addresses
        - asset
        - consumedOnChainId
        - createdOnChainId
        - utxoId
        - amount
        - assetId
        - blockNumber
        - blockTimestamp
        - outputIndex
        - txHash
        - utxoType
    L1ValidatorManagerDetails:
      type: object
      properties:
        blockchainId:
          type: string
        contractAddress:
          type: string
      required:
        - blockchainId
        - contractAddress
    L1ValidatorDetailsTransaction:
      type: object
      properties:
        validationId:
          type: string
          description: >-
            Unique L1 validation ID used network-wide to identify L1 validation
            until its weight is reduced to 0 i.e. removed.
        validationIdHex:
          type: string
          description: >-
            Unique L1 validation ID used network-wide to identify L1 validation
            until its weight is reduced to 0 i.e. removed. In hex format
        nodeId:
          type: string
        subnetId:
          type: string
        weight:
          type: number
          description: >-
            Weight of the L1 validator used while sampling validators within the
            L1. A zero-weight L1 validator means it has been removed from the
            L1, and the validationID is no longer valid
        remainingBalance:
          type: number
          description: >-
            Remaining L1 validator balance in nAVAX until inactive. It can
            rejoin L1 sampling by increasing balance with
            IncreaseL1ValidatorBalanceTx
        balanceChange:
          type: number
          description: >-
            The increase in L1 validator balance (nAVAX) in the current
            transaction. When the balance is returned after the L1 validator is
            disabled or removed, this value is negative
        blsCredentials:
          type: object
      required:
        - validationId
        - validationIdHex
        - nodeId
        - subnetId
        - weight
        - remainingBalance
    SubnetOwnershipInfo:
      type: object
      properties:
        locktime:
          type: number
          description: >-
            Locktime in seconds after which Subnet owners can control this
            Subnet.
          examples:
            - 0
        threshold:
          type: number
          description: >-
            Minimum number of signatures required to sign the Subnet update
            transactions.
          examples:
            - 1
        addresses:
          description: Addresses that are eligible to sign the Subnet update transactions.
          examples:
            - - avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw
          type: array
          items:
            type: string
      required:
        - locktime
        - threshold
        - addresses
    BlsCredentials:
      type: object
      properties:
        publicKey:
          type: string
        proofOfPossession:
          type: string
      required:
        - publicKey
        - proofOfPossession
    BlockchainInfo:
      type: object
      properties:
        chainName:
          type: string
        vmId:
          type: string
        genesisData:
          type: object
          description: >-
            The genesis data of the blockchain.  Present for CreateChainTx. EVM
            based chains will return the genesis data as an object. Non-EVM
            based chains will return the genesis data as an encoded string. The
            encoding depends on the VM
      required:
        - chainName
        - vmId
    PChainTransaction:
      type: object
      properties:
        txHash:
          type: string
          description: A P-Chain transaction hash.
          examples:
            - 3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP
        txType:
          examples:
            - AddDelegatorTx
          $ref: '#/components/schemas/PChainTransactionType'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockNumber:
          type: string
          description: The height of the block in which the transaction was included
        blockHash:
          type: string
        consumedUtxos:
          description: The consumed UTXOs of the transaction
          type: array
          items:
            $ref: '#/components/schemas/PChainUtxo'
        emittedUtxos:
          description: The newly created UTXOs of the transaction
          type: array
          items:
            $ref: '#/components/schemas/PChainUtxo'
        sourceChain:
          type: string
          description: Source chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        destinationChain:
          type: string
          description: Destination chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        value:
          description: >-
            A list of objects containing P-chain Asset basic info and the amount
            of that Asset ID. The amount of nAVAX present in the newly created
            UTXOs of the transaction
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        amountBurned:
          description: >-
            A list of objects containing P-chain Asset basic info and the amount
            of that Asset ID. The nAVAX amount burned in a transaction,
            partially or fully contributing to the transaction fee
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        amountStaked:
          description: >-
            A list of objects containing P-chain Asset basic info and the amount
            of that Asset ID. Present for AddValidatorTx,
            AddPermissionlessValidatorTx, AddDelegatorTx
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        amountL1ValidatorBalanceBurned:
          description: >-
            A list of objects containing P-chain Asset basic info and the amount
            of that Asset ID. The amount of nAVAX locked for pay-as-you-go
            continuous fees to sustain L1 validation.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        startTimestamp:
          type: number
          description: >-
            Present for AddValidatorTx, AddSubnetValidatorTx,
            AddPermissionlessValidatorTx, AddDelegatorTx
        endTimestamp:
          type: number
          description: >-
            Present for AddValidatorTx, AddSubnetValidatorTx,
            AddPermissionlessValidatorTx, AddDelegatorTx
        delegationFeePercent:
          type: string
          description: >-
            The percentage of total estimated delegator rewards allocated to
            validator nodes for supporting delegations. Present for
            AddValidatorTx, AddPermissionlessValidatorTx
        nodeId:
          type: string
          description: >-
            The NodeID of the validator node linked to the stake transaction.
            Present for AddValidatorTx, AddSubnetValidatorTx,
            RemoveSubnetValidatorTx, AddPermissionlessValidatorTx,
            AddDelegatorTx
        subnetId:
          type: string
          description: >-
            Present for AddValidatorTx, AddSubnetValidatorTx,
            RemoveSubnetValidatorTx, AddPermissionlessValidatorTx,
            AddDelegatorTx, CreateChainTx, CreateSubnetTx
        l1ValidatorManagerDetails:
          description: >-
            Details of the L1's validator manager contract and blockchain.
            Present for the ConvertSubnetToL1Tx which transforms a subnet into
            L1
          allOf:
            - $ref: '#/components/schemas/L1ValidatorManagerDetails'
        l1ValidatorDetails:
          description: >-
            Details of L1 validators registered or changed in the current
            transaction. The details reflect the state at the time of the
            transaction, not in real-time
          type: array
          items:
            $ref: '#/components/schemas/L1ValidatorDetailsTransaction'
        estimatedReward:
          type: string
          description: >-
            Estimated reward from the staking transaction, if successful.
            Present for AddValidatorTx, AddPermissionlessValidatorTx,
            AddDelegatorTx
        rewardTxHash:
          type: string
          description: Reward transaction hash for the completed validations or delegations
        rewardAddresses:
          type: array
          items:
            type: string
        memo:
          type: string
        stakingTxHash:
          type: string
          description: Staking transaction corresponding to the RewardValidatorTx
        subnetOwnershipInfo:
          description: >-
            Subnet owner details for the CreateSubnetTx or
            TransferSubnetOwnershipTx
          allOf:
            - $ref: '#/components/schemas/SubnetOwnershipInfo'
        blsCredentials:
          description: >-
            Public Key and PoP of new validator registrations. Present for
            AddPermissionlessValidatorTx
          allOf:
            - $ref: '#/components/schemas/BlsCredentials'
        blockchainInfo:
          description: Details of the blockchain that was created in the CreateChainTx
          allOf:
            - $ref: '#/components/schemas/BlockchainInfo'
      required:
        - txHash
        - txType
        - blockTimestamp
        - blockNumber
        - blockHash
        - consumedUtxos
        - emittedUtxos
        - value
        - amountBurned
        - amountStaked
        - amountL1ValidatorBalanceBurned
    XChainTransactionType:
      type: string
      description: Type of transaction.
      enum:
        - BaseTx
        - CreateAssetTx
        - OperationTx
        - ImportTx
        - ExportTx
        - UNKNOWN
    UtxoCredential:
      type: object
      properties:
        signature:
          type: string
          description: Signature provided to consume the output.
          examples:
            - >-
              bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA
        publicKey:
          type: string
          description: Public key associated with the signature.
          examples:
            - AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI
    Utxo:
      type: object
      properties:
        addresses:
          description: Addresses that are eligible to sign the consumption of this output.
          examples:
            - - avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw
          type: array
          items:
            type: string
        asset:
          $ref: '#/components/schemas/AssetAmount'
        consumedOnChainId:
          type: string
          description: Blockchain ID on which this output is consumed on.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        consumingTxHash:
          type: string
          description: Transaction ID that consumed this output.
          examples:
            - 3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c
        createdOnChainId:
          type: string
          description: Blockchain ID on which this output is created on.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        utxoId:
          type: string
          description: UTXO ID for this output.
          examples:
            - 68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC
        consumingTxTimestamp:
          type: number
          description: Unix timestamp in seconds at which this output was consumed.
          examples:
            - 1599696000
        creationTxHash:
          type: string
          description: Transaction ID that created this output.
          examples:
            - FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z
        credentials:
          description: Credentials that signed the transaction to consume this utxo
          type: array
          items:
            $ref: '#/components/schemas/UtxoCredential'
        groupId:
          type: number
          description: Index representing the minting set for the NFT mint output.
        locktime:
          type: number
          description: Locktime in seconds after which this output can be consumed.
          examples:
            - 0
        outputIndex:
          type: string
          description: >-
            Postion of this output in a list of lexiographically sorted outputs
            of a transaction.
          examples:
            - '38'
        payload:
          type: string
          description: Hex encoded data for NFT assets.
        threshold:
          type: number
          description: Minimum number of signatures required to consume this output.
          examples:
            - 1
        timestamp:
          type: number
          description: Unix timestamp in seconds at which this outptut was created.
          examples:
            - 1599696000
        utxoType:
          type: string
          description: Type of output.
          examples:
            - mint
      required:
        - addresses
        - asset
        - consumedOnChainId
        - createdOnChainId
        - utxoId
        - creationTxHash
        - locktime
        - outputIndex
        - threshold
        - timestamp
        - utxoType
    PrimaryNetworkAssetCap:
      type: string
      description: Cap represents if an asset is a variable or fixed cap asset.
      enum:
        - fixed
        - variable
    XChainAssetDetails:
      type: object
      properties:
        assetId:
          type: string
          description: Unique ID for an asset.
          examples:
            - th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
        name:
          type: string
          description: Name of this asset.
          examples:
            - Avalanche
        symbol:
          type: string
          description: Symbol for this asset (max 4 characters).
          examples:
            - AVAX
        denomination:
          type: number
          description: Denomination of this asset to represent fungibility.
          examples:
            - 9
        type:
          examples:
            - secp256k1
          $ref: '#/components/schemas/PrimaryNetworkAssetType'
        createdAtTimestamp:
          type: number
          description: Timestamp in seconds this asset was created on.
          examples:
            - 1675444720
        cap:
          examples:
            - fixed
          $ref: '#/components/schemas/PrimaryNetworkAssetCap'
      required:
        - assetId
        - name
        - symbol
        - denomination
        - type
        - createdAtTimestamp
        - cap
    TransactionVertexDetail:
      type: object
      properties:
        hash:
          type: string
          description: Vertex ID of the vertex this transaction belongs to.
          examples:
            - 82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S
        height:
          type: number
          description: Vertex height of the vertex this transaction belongs to.
          examples:
            - 1961
        timestamp:
          type: number
          description: Timestamp in seconds this vertex was accepted.
          examples:
            - 1600762738
      required:
        - hash
        - height
        - timestamp
    XChainNonLinearTransaction:
      type: object
      properties:
        txHash:
          type: string
          description: Unique ID for this transaction.
          examples:
            - 3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c
        chainFormat:
          type: string
          description: Represents chain format this transaction is included in.
          enum:
            - non-linear
            - linear
          examples:
            - non-linear
        timestamp:
          type: number
          description: >-
            Latest timestamp in seconds this transaction was accepted out of the
            same transaction accepted in other vertices.
          examples:
            - 1600762738
        txType:
          examples:
            - BaseTx
          $ref: '#/components/schemas/XChainTransactionType'
        memo:
          type: string
          description: Hex encoded memo bytes for this transaction.
          examples:
            - '0x546865204176616c616e6368652050726f6a656374'
        consumedUtxos:
          type: array
          items:
            $ref: '#/components/schemas/Utxo'
        emittedUtxos:
          type: array
          items:
            $ref: '#/components/schemas/Utxo'
        amountUnlocked:
          description: Assets unlocked by inputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        amountCreated:
          description: Assets created by outputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        sourceChain:
          type: string
          description: Source chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        destinationChain:
          type: string
          description: Destination chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        assetCreated:
          description: AssetAmount details of the asset created in CreateAssetTx
          allOf:
            - $ref: '#/components/schemas/XChainAssetDetails'
        vertices:
          description: A transaction on X-Chain can be accepted over multiple vertices.
          type: array
          items:
            $ref: '#/components/schemas/TransactionVertexDetail'
      required:
        - txHash
        - chainFormat
        - timestamp
        - txType
        - memo
        - consumedUtxos
        - emittedUtxos
        - amountUnlocked
        - amountCreated
        - vertices
    XChainLinearTransaction:
      type: object
      properties:
        txHash:
          type: string
          description: Unique ID for this transaction.
          examples:
            - 3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c
        chainFormat:
          type: string
          description: Represents chain format this transaction is included in.
          enum:
            - non-linear
            - linear
          examples:
            - non-linear
        timestamp:
          type: number
          description: >-
            Latest timestamp in seconds this transaction was accepted out of the
            same transaction accepted in other vertices.
          examples:
            - 1600762738
        txType:
          examples:
            - BaseTx
          $ref: '#/components/schemas/XChainTransactionType'
        memo:
          type: string
          description: Hex encoded memo bytes for this transaction.
          examples:
            - '0x546865204176616c616e6368652050726f6a656374'
        consumedUtxos:
          type: array
          items:
            $ref: '#/components/schemas/Utxo'
        emittedUtxos:
          type: array
          items:
            $ref: '#/components/schemas/Utxo'
        amountUnlocked:
          description: Assets unlocked by inputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        amountCreated:
          description: Assets created by outputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        sourceChain:
          type: string
          description: Source chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        destinationChain:
          type: string
          description: Destination chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        assetCreated:
          description: AssetAmount details of the asset created in CreateAssetTx
          allOf:
            - $ref: '#/components/schemas/XChainAssetDetails'
        blockHeight:
          type: number
          description: Height of the block this transaction belongs to.
          examples:
            - 1005
        blockHash:
          type: string
          description: Hash of the block this transaction belongs to.
          examples:
            - 82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S
      required:
        - txHash
        - chainFormat
        - timestamp
        - txType
        - memo
        - consumedUtxos
        - emittedUtxos
        - amountUnlocked
        - amountCreated
        - blockHeight
        - blockHash
    EVMInput:
      type: object
      properties:
        fromAddress:
          type: string
          description: EVM address from which the asset is exported in ExportTx.
          examples:
            - '0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c'
        asset:
          description: AssetAmount details for the asset being transferred.
          allOf:
            - $ref: '#/components/schemas/AssetAmount'
        credentials:
          description: Credentials that signed this transaction.
          type: array
          items:
            $ref: '#/components/schemas/UtxoCredential'
      required:
        - fromAddress
        - asset
        - credentials
    CChainExportTransaction:
      type: object
      properties:
        txHash:
          type: string
          description: Unique ID for this transaction.
          examples:
            - 3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c
        blockHeight:
          type: number
          description: Height of the block this transaction belongs to.
          examples:
            - 1005
        blockHash:
          type: string
          description: Hash of the block this transaction belongs to.
          examples:
            - '0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee'
        timestamp:
          type: number
          description: Latest timestamp in seconds this transaction was accepted.
          examples:
            - 1600762738
        memo:
          type: string
          description: Hex encoded memo bytes for this transaction.
          examples:
            - '0x546865204176616c616e6368652050726f6a656374'
        amountUnlocked:
          description: Assets unlocked by inputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        amountCreated:
          description: Assets created by outputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        sourceChain:
          type: string
          description: Source chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        destinationChain:
          type: string
          description: Destination chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        txType:
          type: string
          description: Type of transaction.
          enum:
            - ExportTx
          examples:
            - ExportTx
        evmInputs:
          type: array
          items:
            $ref: '#/components/schemas/EVMInput'
        emittedUtxos:
          type: array
          items:
            $ref: '#/components/schemas/Utxo'
      required:
        - txHash
        - blockHeight
        - blockHash
        - timestamp
        - memo
        - amountUnlocked
        - amountCreated
        - sourceChain
        - destinationChain
        - txType
        - evmInputs
        - emittedUtxos
    EVMOutput:
      type: object
      properties:
        toAddress:
          type: string
          description: EVM address to which the asset is imported in ImportTx
          examples:
            - '0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c'
        asset:
          description: AssetAmount details for the asset being transferred.
          allOf:
            - $ref: '#/components/schemas/AssetAmount'
      required:
        - toAddress
        - asset
    CChainImportTransaction:
      type: object
      properties:
        txHash:
          type: string
          description: Unique ID for this transaction.
          examples:
            - 3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c
        blockHeight:
          type: number
          description: Height of the block this transaction belongs to.
          examples:
            - 1005
        blockHash:
          type: string
          description: Hash of the block this transaction belongs to.
          examples:
            - '0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee'
        timestamp:
          type: number
          description: Latest timestamp in seconds this transaction was accepted.
          examples:
            - 1600762738
        memo:
          type: string
          description: Hex encoded memo bytes for this transaction.
          examples:
            - '0x546865204176616c616e6368652050726f6a656374'
        amountUnlocked:
          description: Assets unlocked by inputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        amountCreated:
          description: Assets created by outputs of this transaction.
          type: array
          items:
            $ref: '#/components/schemas/AssetAmount'
        sourceChain:
          type: string
          description: Source chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        destinationChain:
          type: string
          description: Destination chain for an atomic transaction.
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        txType:
          type: string
          description: Type of transaction.
          enum:
            - ImportTx
          examples:
            - ImportTx
        evmOutputs:
          type: array
          items:
            $ref: '#/components/schemas/EVMOutput'
        consumedUtxos:
          type: array
          items:
            $ref: '#/components/schemas/Utxo'
      required:
        - txHash
        - blockHeight
        - blockHash
        - timestamp
        - memo
        - amountUnlocked
        - amountCreated
        - sourceChain
        - destinationChain
        - txType
        - evmOutputs
        - consumedUtxos
    BlockchainId:
      type: string
      enum:
        - 11111111111111111111111111111111LpoYY
        - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        - 2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm
        - 2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5
        - yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp
        - p-chain
        - x-chain
        - c-chain
    PrimaryNetworkChainName:
      type: string
      enum:
        - p-chain
        - x-chain
        - c-chain
    PrimaryNetworkChainInfo:
      type: object
      properties:
        chainName:
          $ref: '#/components/schemas/PrimaryNetworkChainName'
        network:
          $ref: '#/components/schemas/Network'
      required:
        - chainName
        - network
    ListPChainTransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/PChainTransaction'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - transactions
        - chainInfo
    ListXChainTransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/XChainNonLinearTransaction'
              - $ref: '#/components/schemas/XChainLinearTransaction'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - transactions
        - chainInfo
    ListCChainAtomicTransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/CChainExportTransaction'
              - $ref: '#/components/schemas/CChainImportTransaction'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - transactions
        - chainInfo
    PrimaryNetworkTxType:
      type: string
      enum:
        - AddValidatorTx
        - AddSubnetValidatorTx
        - AddDelegatorTx
        - CreateChainTx
        - CreateSubnetTx
        - ImportTx
        - ExportTx
        - AdvanceTimeTx
        - RewardValidatorTx
        - RemoveSubnetValidatorTx
        - TransformSubnetTx
        - AddPermissionlessValidatorTx
        - AddPermissionlessDelegatorTx
        - BaseTx
        - TransferSubnetOwnershipTx
        - ConvertSubnetToL1Tx
        - RegisterL1ValidatorTx
        - SetL1ValidatorWeightTx
        - DisableL1ValidatorTx
        - IncreaseL1ValidatorBalanceTx
        - UNKNOWN
        - CreateAssetTx
        - OperationTx
    SortOrder:
      type: string
      enum:
        - asc
        - desc
    PChainId:
      type: string
      enum:
        - 11111111111111111111111111111111LpoYY
        - p-chain
    PendingReward:
      type: object
      properties:
        addresses:
          description: An array of P-Chain wallet addresses.
          examples:
            - - avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          type: array
          items:
            type: string
        txHash:
          type: string
        amountStaked:
          type: string
        nodeId:
          type: string
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        rewardType:
          $ref: '#/components/schemas/RewardType'
        progress:
          type: number
        estimatedReward:
          description: >-
            An object containing P-chain Asset basic info and the amount of that
            Asset ID.
          allOf:
            - $ref: '#/components/schemas/AssetAmount'
      required:
        - addresses
        - txHash
        - amountStaked
        - nodeId
        - startTimestamp
        - endTimestamp
        - rewardType
        - progress
        - estimatedReward
    ListPendingRewardsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        pendingRewards:
          type: array
          items:
            $ref: '#/components/schemas/PendingReward'
      required:
        - pendingRewards
    CurrencyCode:
      type: string
      description: ISO 4217 currency code.
      enum:
        - usd
        - eur
        - aud
        - cad
        - chf
        - clp
        - cny
        - czk
        - dkk
        - gbp
        - hkd
        - huf
        - jpy
        - nzd
    Money:
      type: object
      properties:
        currencyCode:
          examples:
            - usd
          $ref: '#/components/schemas/CurrencyCode'
        value:
          type: number
          description: Monetary value in base 10 decimals.
          examples:
            - '42.42'
      required:
        - currencyCode
        - value
    AssetWithPriceInfo:
      type: object
      properties:
        assetId:
          type: string
          description: Unique ID for an asset.
          examples:
            - th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
        name:
          type: string
          description: Name of this asset.
          examples:
            - Avalanche
        symbol:
          type: string
          description: Symbol for this asset (max 4 characters).
          examples:
            - AVAX
        denomination:
          type: number
          description: Denomination of this asset to represent fungibility.
          examples:
            - 9
        type:
          examples:
            - secp256k1
          $ref: '#/components/schemas/PrimaryNetworkAssetType'
        amount:
          type: string
          description: Amount of the asset.
          examples:
            - '5001000'
        historicalPrice:
          description: >-
            The historical asset price at the time the reward was granted, if
            available. Note, this is only provided if the reward occured more
            than 24 hours ago.
          allOf:
            - $ref: '#/components/schemas/Money'
      required:
        - assetId
        - name
        - symbol
        - denomination
        - type
        - amount
    HistoricalReward:
      type: object
      properties:
        addresses:
          description: An array of P-Chain wallet addresses.
          examples:
            - - avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg
          type: array
          items:
            type: string
        txHash:
          type: string
        amountStaked:
          type: string
        nodeId:
          type: string
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        rewardType:
          $ref: '#/components/schemas/RewardType'
        utxoId:
          type: string
        outputIndex:
          type: number
        reward:
          $ref: '#/components/schemas/AssetWithPriceInfo'
        rewardTxHash:
          type: string
      required:
        - addresses
        - txHash
        - amountStaked
        - nodeId
        - startTimestamp
        - endTimestamp
        - rewardType
        - utxoId
        - outputIndex
        - reward
        - rewardTxHash
    ListHistoricalRewardsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        historicalRewards:
          type: array
          items:
            $ref: '#/components/schemas/HistoricalReward'
      required:
        - historicalRewards
    ListPChainUtxosResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        utxos:
          type: array
          items:
            $ref: '#/components/schemas/PChainUtxo'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - utxos
        - chainInfo
    ListUtxosResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        utxos:
          type: array
          items:
            $ref: '#/components/schemas/Utxo'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - utxos
        - chainInfo
    AggregatedAssetAmount:
      type: object
      properties:
        assetId:
          type: string
          description: Unique ID for an asset.
          examples:
            - th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
        name:
          type: string
          description: Name of this asset.
          examples:
            - Avalanche
        symbol:
          type: string
          description: Symbol for this asset (max 4 characters).
          examples:
            - AVAX
        denomination:
          type: number
          description: Denomination of this asset to represent fungibility.
          examples:
            - 9
        type:
          examples:
            - secp256k1
          $ref: '#/components/schemas/PrimaryNetworkAssetType'
        amount:
          type: string
          description: Amount of the asset.
          examples:
            - '5001000'
        utxoCount:
          type: number
          examples:
            - 1
      required:
        - assetId
        - name
        - symbol
        - denomination
        - type
        - amount
        - utxoCount
    PChainSharedAsset:
      type: object
      properties:
        assetId:
          type: string
          description: Unique ID for an asset.
          examples:
            - th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
        name:
          type: string
          description: Name of this asset.
          examples:
            - Avalanche
        symbol:
          type: string
          description: Symbol for this asset (max 4 characters).
          examples:
            - AVAX
        denomination:
          type: number
          description: Denomination of this asset to represent fungibility.
          examples:
            - 9
        type:
          examples:
            - secp256k1
          $ref: '#/components/schemas/PrimaryNetworkAssetType'
        amount:
          type: string
          description: Amount of the asset.
          examples:
            - '5001000'
        utxoCount:
          type: number
          examples:
            - 1
        sharedWithChainId:
          type: string
          examples:
            - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        status:
          type: string
      required:
        - assetId
        - name
        - symbol
        - denomination
        - type
        - amount
        - utxoCount
        - sharedWithChainId
        - status
    PChainBalance:
      type: object
      properties:
        unlockedUnstaked:
          description: >-
            A list of objects containing P-chain Asset basic info, amount,  and
            utxo count of that Asset ID.  Denotes the amount of unstaked Avax
            that is consumable by any transaction.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        unlockedStaked:
          description: >-
            A list of objects containing P-chain Asset basic info, amount,  and
            utxo count of that Asset ID.  Denotes the amount of staked Avax that
            is consumable by any transaction when the staking period ends.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        lockedPlatform:
          description: >-
            A list of objects containing P-chain Asset basic info, amount,  and
            utxo count of that Asset ID.  Denotes the amount of unstaked Avax
            that is locked at the platform level and not consumable by any
            transaction at the current time.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        lockedStakeable:
          description: >-
            A list of objects containing P-chain Asset basic info, amount,  and
            utxo count of that Asset ID.  Denotes the amount of unstaked Avax
            that is locked at the platform level and only consumeable for
            staking transactions.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        lockedStaked:
          description: >-
            A list of objects containing P-chain Asset basic info, amount,  and
            utxo count of that Asset ID.  Denotes the amount of staked Avax that
            will be locked when the staking period ends.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        pendingStaked:
          description: >-
            A list of objects containing P-chain Asset basic info, amount,  and
            utxo count of that Asset ID.  Denotes the amount of staked Avax
            whose staking period has not yet started.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        atomicMemoryUnlocked:
          description: >-
            A list of objects containing P-chain Asset basic info, amount and
            utxo count of that Asset ID. Denotes the amount of unlocked Avax in
            the atomic memory between P-Chain and other chain.
          type: array
          items:
            $ref: '#/components/schemas/PChainSharedAsset'
        atomicMemoryLocked:
          description: >-
            A list of objects containing P-chain Asset basic info, amount and
            utxo count of that Asset ID. Denotes the amount of locked Avax in
            the atomic memory between P-Chain and other chain.
          type: array
          items:
            $ref: '#/components/schemas/PChainSharedAsset'
      required:
        - unlockedUnstaked
        - unlockedStaked
        - lockedPlatform
        - lockedStakeable
        - lockedStaked
        - pendingStaked
        - atomicMemoryUnlocked
        - atomicMemoryLocked
    ListPChainBalancesResponse:
      type: object
      properties:
        balances:
          $ref: '#/components/schemas/PChainBalance'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - balances
        - chainInfo
    XChainSharedAssetBalance:
      type: object
      properties:
        assetId:
          type: string
          description: Unique ID for an asset.
          examples:
            - th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
        name:
          type: string
          description: Name of this asset.
          examples:
            - Avalanche
        symbol:
          type: string
          description: Symbol for this asset (max 4 characters).
          examples:
            - AVAX
        denomination:
          type: number
          description: Denomination of this asset to represent fungibility.
          examples:
            - 9
        type:
          examples:
            - secp256k1
          $ref: '#/components/schemas/PrimaryNetworkAssetType'
        amount:
          type: string
          description: Amount of the asset.
          examples:
            - '5001000'
        utxoCount:
          type: number
          examples:
            - 1
        sharedWithChainId:
          type: string
      required:
        - assetId
        - name
        - symbol
        - denomination
        - type
        - amount
        - utxoCount
        - sharedWithChainId
    XChainBalances:
      type: object
      properties:
        locked:
          description: A list of objects containing X-chain Asset balance information.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        unlocked:
          description: A list of objects containing X-chain Asset balance information.
          type: array
          items:
            $ref: '#/components/schemas/AggregatedAssetAmount'
        atomicMemoryUnlocked:
          type: array
          items:
            $ref: '#/components/schemas/XChainSharedAssetBalance'
        atomicMemoryLocked:
          type: array
          items:
            $ref: '#/components/schemas/XChainSharedAssetBalance'
      required:
        - locked
        - unlocked
        - atomicMemoryUnlocked
        - atomicMemoryLocked
    ListXChainBalancesResponse:
      type: object
      properties:
        balances:
          $ref: '#/components/schemas/XChainBalances'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - balances
        - chainInfo
    CChainSharedAssetBalance:
      type: object
      properties:
        assetId:
          type: string
          description: Unique ID for an asset.
          examples:
            - th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof
        name:
          type: string
          description: Name of this asset.
          examples:
            - Avalanche
        symbol:
          type: string
          description: Symbol for this asset (max 4 characters).
          examples:
            - AVAX
        denomination:
          type: number
          description: Denomination of this asset to represent fungibility.
          examples:
            - 9
        type:
          examples:
            - secp256k1
          $ref: '#/components/schemas/PrimaryNetworkAssetType'
        amount:
          type: string
          description: Amount of the asset.
          examples:
            - '5001000'
        utxoCount:
          type: number
          examples:
            - 1
        sharedWithChainId:
          type: string
      required:
        - assetId
        - name
        - symbol
        - denomination
        - type
        - amount
        - utxoCount
        - sharedWithChainId
    CChainAtomicBalances:
      type: object
      properties:
        atomicMemoryUnlocked:
          type: array
          items:
            $ref: '#/components/schemas/CChainSharedAssetBalance'
        atomicMemoryLocked:
          type: array
          items:
            $ref: '#/components/schemas/CChainSharedAssetBalance'
      required:
        - atomicMemoryUnlocked
        - atomicMemoryLocked
    ListCChainAtomicBalancesResponse:
      type: object
      properties:
        balances:
          $ref: '#/components/schemas/CChainAtomicBalances'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - balances
        - chainInfo
    ProposerDetails:
      type: object
      properties:
        proposerId:
          type: string
        proposerParentId:
          type: string
        proposerNodeId:
          type: string
        proposerPChainHeight:
          type: number
        proposerTimestamp:
          type: number
    GetPrimaryNetworkBlockResponse:
      type: object
      properties:
        blockNumber:
          type: string
        blockHash:
          type: string
        parentHash:
          type: string
        blockTimestamp:
          type: number
        blockType:
          type: string
        txCount:
          type: number
        transactions:
          type: array
          items:
            type: string
        blockSizeBytes:
          type: number
        l1ValidatorsAccruedFees:
          type: number
        activeL1Validators:
          type: number
        currentSupply:
          type: string
        proposerDetails:
          $ref: '#/components/schemas/ProposerDetails'
      required:
        - blockNumber
        - blockHash
        - parentHash
        - blockTimestamp
        - blockType
        - txCount
        - transactions
        - blockSizeBytes
    PrimaryNetworkBlock:
      type: object
      properties:
        blockNumber:
          type: string
        blockHash:
          type: string
        parentHash:
          type: string
        blockTimestamp:
          type: number
        blockType:
          type: string
        txCount:
          type: number
        transactions:
          type: array
          items:
            type: string
        blockSizeBytes:
          type: number
        l1ValidatorsAccruedFees:
          type: number
        activeL1Validators:
          type: number
        currentSupply:
          type: string
        proposerDetails:
          $ref: '#/components/schemas/ProposerDetails'
      required:
        - blockNumber
        - blockHash
        - parentHash
        - blockTimestamp
        - blockType
        - txCount
        - transactions
        - blockSizeBytes
    ListPrimaryNetworkBlocksResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/PrimaryNetworkBlock'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - blocks
        - chainInfo
    XChainId:
      type: string
      enum:
        - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        - 2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm
        - x-chain
    XChainVertex:
      type: object
      properties:
        vertexHash:
          type: string
        parentHashes:
          type: array
          items:
            type: string
        vertexHeight:
          type: number
        vertexIndex:
          type: number
        vertexTimestamp:
          type: number
        txCount:
          type: number
        transactions:
          type: array
          items:
            type: string
        vertexSizeBytes:
          type: number
      required:
        - vertexHash
        - parentHashes
        - vertexHeight
        - vertexIndex
        - vertexTimestamp
        - txCount
        - transactions
        - vertexSizeBytes
    ListXChainVerticesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/XChainVertex'
        chainInfo:
          $ref: '#/components/schemas/PrimaryNetworkChainInfo'
      required:
        - vertices
        - chainInfo
    BlockchainIds:
      type: string
      enum:
        - 11111111111111111111111111111111LpoYY
        - 2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM
        - 2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm
        - 2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5
        - yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp
    ChainAddressChainIdMap:
      type: object
      properties:
        address:
          type: string
        blockchainIds:
          type: array
          items:
            $ref: '#/components/schemas/BlockchainIds'
      required:
        - address
        - blockchainIds
    ChainAddressChainIdMapListResponse:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/ChainAddressChainIdMap'
      required:
        - addresses
    StakingDistribution:
      type: object
      properties:
        version:
          type: string
          description: AvalancheGo version for the validator node.
        amountStaked:
          type: string
          description: The total amount staked by validators using this version.
        validatorCount:
          type: number
          description: The number of validators using this version.
      required:
        - version
        - amountStaked
        - validatorCount
    ValidatorsDetails:
      type: object
      properties:
        validatorCount:
          type: number
        totalAmountStaked:
          type: string
        estimatedAnnualStakingReward:
          type: string
          description: >-
            Total potential rewards from currently active validations and
            delegations.
        stakingDistributionByVersion:
          type: array
          items:
            $ref: '#/components/schemas/StakingDistribution'
        stakingRatio:
          type: string
          description: Ratio of total active stake amount to the current supply.
      required:
        - validatorCount
        - totalAmountStaked
        - estimatedAnnualStakingReward
        - stakingDistributionByVersion
        - stakingRatio
    DelegatorsDetails:
      type: object
      properties:
        delegatorCount:
          type: number
        totalAmountStaked:
          type: string
      required:
        - delegatorCount
        - totalAmountStaked
    GetNetworkDetailsResponse:
      type: object
      properties:
        validatorDetails:
          $ref: '#/components/schemas/ValidatorsDetails'
        delegatorDetails:
          $ref: '#/components/schemas/DelegatorsDetails'
      required:
        - validatorDetails
        - delegatorDetails
    Blockchain:
      type: object
      properties:
        createBlockTimestamp:
          type: number
        createBlockNumber:
          type: string
        blockchainId:
          type: string
        vmId:
          type: string
        subnetId:
          type: string
        blockchainName:
          type: string
        evmChainId:
          type: number
          description: >-
            EVM Chain ID for the EVM-based chains. This field is extracted from
            genesis data, and may be present for non-EVM chains as well.
          example: 43114
        genesisData:
          type: object
          description: The genesis data of the blockchain.
          example: '{"chainId": 43114}'
      required:
        - createBlockTimestamp
        - createBlockNumber
        - blockchainId
        - vmId
        - subnetId
        - blockchainName
        - evmChainId
    ListBlockchainsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        blockchains:
          type: array
          items:
            $ref: '#/components/schemas/Blockchain'
      required:
        - blockchains
    Subnet:
      type: object
      properties:
        createBlockTimestamp:
          type: number
        createBlockIndex:
          type: string
        subnetId:
          type: string
        ownerAddresses:
          deprecated: true
          description: This field is deprecated. Use subnetOwnershipInfo instead.
          type: array
          items:
            type: string
        threshold:
          type: number
          deprecated: true
          description: This field is deprecated. Use subnetOwnershipInfo instead.
        locktime:
          type: number
          deprecated: true
          description: This field is deprecated. Use subnetOwnershipInfo instead.
        subnetOwnershipInfo:
          description: Latest subnet owner details for this Subnet.
          allOf:
            - $ref: '#/components/schemas/SubnetOwnershipInfo'
        isL1:
          type: boolean
          description: Whether the subnet is an L1 or not.
        l1ConversionTransactionHash:
          type: string
          description: >-
            Transaction hash of ConvertSubnetToL1Tx which converted this Subnet
            to L1.
        l1ValidatorManagerDetails:
          description: L1 validator manager details.
          allOf:
            - $ref: '#/components/schemas/L1ValidatorManagerDetails'
        blockchains:
          type: array
          items:
            $ref: '#/components/schemas/Blockchain'
      required:
        - createBlockTimestamp
        - createBlockIndex
        - subnetId
        - ownerAddresses
        - threshold
        - locktime
        - subnetOwnershipInfo
        - isL1
        - blockchains
    ListSubnetsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        subnets:
          type: array
          items:
            $ref: '#/components/schemas/Subnet'
      required:
        - subnets
    SortByOption:
      type: string
      enum:
        - blockIndex
        - delegationCapacity
        - timeRemaining
        - delegationFee
        - uptimePerformance
    ValidationStatusType:
      type: string
      enum:
        - completed
        - active
        - pending
        - removed
    Rewards:
      type: object
      properties:
        validationRewardAmount:
          type: string
        delegationRewardAmount:
          type: string
        rewardAddresses:
          type: array
          items:
            type: string
        rewardTxHash:
          type: string
      required:
        - validationRewardAmount
        - delegationRewardAmount
    CompletedValidatorDetails:
      type: object
      properties:
        txHash:
          type: string
        nodeId:
          type: string
        subnetId:
          type: string
        amountStaked:
          type: string
        delegationFee:
          type: string
          description: >-
            The percentage of total estimated delegator rewards allocated to
            validator nodes for supporting delegations.
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        blsCredentials:
          description: Present for AddPermissionlessValidatorTx
          allOf:
            - $ref: '#/components/schemas/BlsCredentials'
        delegatorCount:
          type: number
        amountDelegated:
          type: string
        rewards:
          $ref: '#/components/schemas/Rewards'
        validationStatus:
          type: string
          enum:
            - completed
      required:
        - txHash
        - nodeId
        - subnetId
        - amountStaked
        - startTimestamp
        - endTimestamp
        - delegatorCount
        - rewards
        - validationStatus
    ValidatorHealthDetails:
      type: object
      properties:
        reachabilityPercent:
          type: number
          description: Percent of requests responded to in last polling.
        benchedPChainRequestsPercent:
          type: number
          description: Percent of requests benched on the P-Chain in last polling.
        benchedXChainRequestsPercent:
          type: number
          description: Percentage of requests benched on the X-Chain in last polling.
        benchedCChainRequestsPercent:
          type: number
          description: Percentage of requests benched on the C-Chain in last polling.
      required:
        - reachabilityPercent
        - benchedPChainRequestsPercent
        - benchedXChainRequestsPercent
        - benchedCChainRequestsPercent
    Geolocation:
      type: object
      properties:
        city:
          type: string
          description: The name of the validator node.
        country:
          type: string
          description: The city of the validator node.
        countryCode:
          type: string
          description: The country code of the validator node.
        latitude:
          type: number
          description: The latitude of the validator node.
        longitude:
          type: number
          description: The longitude of the validator node.
      required:
        - city
        - country
        - countryCode
        - latitude
        - longitude
    ActiveValidatorDetails:
      type: object
      properties:
        txHash:
          type: string
        nodeId:
          type: string
        subnetId:
          type: string
        amountStaked:
          type: string
        delegationFee:
          type: string
          description: >-
            The percentage of total estimated delegator rewards allocated to
            validator nodes for supporting delegations.
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        blsCredentials:
          description: Present for AddPermissionlessValidatorTx
          allOf:
            - $ref: '#/components/schemas/BlsCredentials'
        stakePercentage:
          type: number
          description: >-
            The percentage of this validator's stake amount to the total active
            stake.
        delegatorCount:
          type: number
          description: The number of delegators linked to the validator.
        amountDelegated:
          type: string
          description: The total amount in nAVAX delegated to the validator.
        uptimePerformance:
          type: number
          description: >-
            The validator's uptime percentage, as observed by our internal node
            and measured over time.
        avalancheGoVersion:
          type: string
        delegationCapacity:
          type: string
          description: >-
            The amount of stake in nAVAX that can be delegated to this
            validator.
        potentialRewards:
          description: Estimated rewards for the validator if the validation is successful.
          allOf:
            - $ref: '#/components/schemas/Rewards'
        validationStatus:
          type: string
          enum:
            - active
        validatorHealth:
          $ref: '#/components/schemas/ValidatorHealthDetails'
        geolocation:
          nullable: true
          description: The geographical location of the validator node, if available.
          allOf:
            - $ref: '#/components/schemas/Geolocation'
      required:
        - txHash
        - nodeId
        - subnetId
        - amountStaked
        - startTimestamp
        - endTimestamp
        - stakePercentage
        - delegatorCount
        - uptimePerformance
        - potentialRewards
        - validationStatus
        - validatorHealth
        - geolocation
    PendingValidatorDetails:
      type: object
      properties:
        txHash:
          type: string
        nodeId:
          type: string
        subnetId:
          type: string
        amountStaked:
          type: string
        delegationFee:
          type: string
          description: >-
            The percentage of total estimated delegator rewards allocated to
            validator nodes for supporting delegations.
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        blsCredentials:
          description: Present for AddPermissionlessValidatorTx
          allOf:
            - $ref: '#/components/schemas/BlsCredentials'
        validationStatus:
          type: string
          enum:
            - pending
      required:
        - txHash
        - nodeId
        - subnetId
        - amountStaked
        - startTimestamp
        - endTimestamp
        - validationStatus
    RemovedValidatorDetails:
      type: object
      properties:
        txHash:
          type: string
        nodeId:
          type: string
        subnetId:
          type: string
        amountStaked:
          type: string
        delegationFee:
          type: string
          description: >-
            The percentage of total estimated delegator rewards allocated to
            validator nodes for supporting delegations.
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        blsCredentials:
          description: Present for AddPermissionlessValidatorTx
          allOf:
            - $ref: '#/components/schemas/BlsCredentials'
        removeTxHash:
          type: string
          description: The transaction hash that removed the permissioned subnet validator.
        removeTimestamp:
          type: number
          description: >-
            The timestamp of the transaction that removed the permissioned
            subnet validator.
        validationStatus:
          type: string
          enum:
            - removed
      required:
        - txHash
        - nodeId
        - subnetId
        - amountStaked
        - startTimestamp
        - endTimestamp
        - removeTxHash
        - removeTimestamp
        - validationStatus
    ListValidatorDetailsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        validators:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/CompletedValidatorDetails'
              - $ref: '#/components/schemas/ActiveValidatorDetails'
              - $ref: '#/components/schemas/PendingValidatorDetails'
              - $ref: '#/components/schemas/RemovedValidatorDetails'
            discriminator:
              propertyName: validationStatus
              mapping:
                active: '#/components/schemas/ActiveValidatorDetails'
                pending: '#/components/schemas/PendingValidatorDetails'
                completed: '#/components/schemas/CompletedValidatorDetails'
                removed: '#/components/schemas/RemovedValidatorDetails'
          description: The list of validator Details.
      required:
        - validators
    DelegationStatusType:
      type: string
      enum:
        - completed
        - active
        - pending
    CompletedDelegatorDetails:
      type: object
      properties:
        txHash:
          type: string
        nodeId:
          type: string
        rewardAddresses:
          type: array
          items:
            type: string
        amountDelegated:
          type: string
        delegationFee:
          type: string
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        grossReward:
          type: string
          description: Total rewards distributed for the successful delegation.
        netReward:
          type: string
          description: >-
            Net rewards distributed to the delegator after deducting delegation
            fee from the gross reward for the successful delegation.
        delegationStatus:
          type: string
          enum:
            - completed
      required:
        - txHash
        - nodeId
        - rewardAddresses
        - amountDelegated
        - delegationFee
        - startTimestamp
        - endTimestamp
        - grossReward
        - netReward
        - delegationStatus
    ActiveDelegatorDetails:
      type: object
      properties:
        txHash:
          type: string
        nodeId:
          type: string
        rewardAddresses:
          type: array
          items:
            type: string
        amountDelegated:
          type: string
        delegationFee:
          type: string
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        estimatedGrossReward:
          type: string
        estimatedNetReward:
          type: string
        delegationStatus:
          type: string
          enum:
            - active
      required:
        - txHash
        - nodeId
        - rewardAddresses
        - amountDelegated
        - delegationFee
        - startTimestamp
        - endTimestamp
        - estimatedGrossReward
        - estimatedNetReward
        - delegationStatus
    PendingDelegatorDetails:
      type: object
      properties:
        txHash:
          type: string
        nodeId:
          type: string
        rewardAddresses:
          type: array
          items:
            type: string
        amountDelegated:
          type: string
        delegationFee:
          type: string
        startTimestamp:
          type: number
        endTimestamp:
          type: number
        estimatedGrossReward:
          type: string
          description: >-
            Estimated total rewards that will be distributed for the successful
            delegation.
        estimatedNetReward:
          type: string
          description: >-
            Estimated net rewards that will be distributed to the delegator
            after deducting delegation fee from the gross reward for the
            successful delegation.
        delegationStatus:
          type: string
          enum:
            - pending
      required:
        - txHash
        - nodeId
        - rewardAddresses
        - amountDelegated
        - delegationFee
        - startTimestamp
        - endTimestamp
        - estimatedGrossReward
        - estimatedNetReward
        - delegationStatus
    ListDelegatorDetailsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        delegators:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/CompletedDelegatorDetails'
              - $ref: '#/components/schemas/ActiveDelegatorDetails'
              - $ref: '#/components/schemas/PendingDelegatorDetails'
            discriminator:
              propertyName: delegationStatus
              mapping:
                active: '#/components/schemas/ActiveDelegatorDetails'
                pending: '#/components/schemas/PendingDelegatorDetails'
                completed: '#/components/schemas/CompletedDelegatorDetails'
          description: The list of Delegator Details.
      required:
        - delegators
    BalanceOwner:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
        threshold:
          type: number
      required:
        - addresses
        - threshold
    L1ValidatorDetailsFull:
      type: object
      properties:
        validationId:
          type: string
          description: >-
            Unique L1 validation ID used network-wide to identify L1 validation
            until its weight is reduced to 0 i.e. removed.
        validationIdHex:
          type: string
          description: >-
            Unique L1 validation ID used network-wide to identify L1 validation
            until its weight is reduced to 0 i.e. removed. In hex format
        nodeId:
          type: string
        subnetId:
          type: string
        weight:
          type: number
          description: >-
            Weight of the L1 validator used while sampling validators within the
            L1. A zero-weight L1 validator means it has been removed from the
            L1, and the validationID is no longer valid
        remainingBalance:
          type: number
          description: >-
            Remaining L1 validator balance in nAVAX until inactive. It can
            rejoin L1 sampling by increasing balance with
            IncreaseL1ValidatorBalanceTx
        creationTimestamp:
          type: number
          description: The timestamp of the transaction which created this L1 validator
        blsCredentials:
          type: object
        remainingBalanceOwner:
          description: >-
            The L1 validator owner's balance, returned after it's disabled or
            removed
          allOf:
            - $ref: '#/components/schemas/BalanceOwner'
        deactivationOwner:
          description: Owner ddresses details which can disable or remove the L1 validator
          allOf:
            - $ref: '#/components/schemas/BalanceOwner'
      required:
        - validationId
        - validationIdHex
        - nodeId
        - subnetId
        - weight
        - remainingBalance
        - creationTimestamp
        - blsCredentials
        - remainingBalanceOwner
        - deactivationOwner
    ListL1ValidatorsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        validators:
          description: >-
            The list of L1 validations for the given Subnet ID, NodeId or
            validationId
          type: array
          items:
            $ref: '#/components/schemas/L1ValidatorDetailsFull'
        blockHeight:
          type: string
          description: >-
            Block height at which the L1 validator's remaining balance is
            calculated
      required:
        - validators
        - blockHeight
    TeleporterReceipt:
      type: object
      properties:
        receivedMessageNonce:
          type: string
        relayerRewardAddress:
          type: string
      required:
        - receivedMessageNonce
        - relayerRewardAddress
    TeleporterRewardDetails:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        logoUri:
          type: string
          description: The logo uri for the address.
          examples:
            - >-
              https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg
        ercType:
          type: string
          enum:
            - ERC-20
        price:
          description: The token price, if available.
          allOf:
            - $ref: '#/components/schemas/Money'
        value:
          type: string
      required:
        - address
        - name
        - symbol
        - decimals
        - ercType
        - value
    TeleporterSourceTransaction:
      type: object
      properties:
        txHash:
          type: string
        timestamp:
          type: number
        gasSpent:
          type: string
      required:
        - txHash
        - timestamp
        - gasSpent
    PendingTeleporterMessage:
      type: object
      properties:
        messageId:
          type: string
        teleporterContractAddress:
          type: string
        sourceBlockchainId:
          type: string
        destinationBlockchainId:
          type: string
        sourceEvmChainId:
          type: string
        destinationEvmChainId:
          type: string
        messageNonce:
          type: string
        from:
          type: string
        to:
          type: string
        data:
          type: string
        messageExecuted:
          type: boolean
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/TeleporterReceipt'
        receiptDelivered:
          type: boolean
        rewardDetails:
          $ref: '#/components/schemas/TeleporterRewardDetails'
        sourceTransaction:
          $ref: '#/components/schemas/TeleporterSourceTransaction'
        status:
          type: string
          enum:
            - pending
      required:
        - messageId
        - teleporterContractAddress
        - sourceBlockchainId
        - destinationBlockchainId
        - sourceEvmChainId
        - destinationEvmChainId
        - messageNonce
        - from
        - to
        - messageExecuted
        - receipts
        - receiptDelivered
        - rewardDetails
        - sourceTransaction
        - status
    TeleporterDestinationTransaction:
      type: object
      properties:
        txHash:
          type: string
        timestamp:
          type: number
        gasSpent:
          type: string
        rewardRedeemer:
          type: string
        delivererAddress:
          type: string
      required:
        - txHash
        - timestamp
        - gasSpent
        - rewardRedeemer
        - delivererAddress
    DeliveredTeleporterMessage:
      type: object
      properties:
        messageId:
          type: string
        teleporterContractAddress:
          type: string
        sourceBlockchainId:
          type: string
        destinationBlockchainId:
          type: string
        sourceEvmChainId:
          type: string
        destinationEvmChainId:
          type: string
        messageNonce:
          type: string
        from:
          type: string
        to:
          type: string
        data:
          type: string
        messageExecuted:
          type: boolean
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/TeleporterReceipt'
        receiptDelivered:
          type: boolean
        rewardDetails:
          $ref: '#/components/schemas/TeleporterRewardDetails'
        sourceTransaction:
          $ref: '#/components/schemas/TeleporterSourceTransaction'
        destinationTransaction:
          $ref: '#/components/schemas/TeleporterDestinationTransaction'
        status:
          type: string
          enum:
            - delivered
      required:
        - messageId
        - teleporterContractAddress
        - sourceBlockchainId
        - destinationBlockchainId
        - sourceEvmChainId
        - destinationEvmChainId
        - messageNonce
        - from
        - to
        - messageExecuted
        - receipts
        - receiptDelivered
        - rewardDetails
        - sourceTransaction
        - destinationTransaction
        - status
    DeliveredSourceNotIndexedTeleporterMessage:
      type: object
      properties:
        messageId:
          type: string
        teleporterContractAddress:
          type: string
        sourceBlockchainId:
          type: string
        destinationBlockchainId:
          type: string
        sourceEvmChainId:
          type: string
        destinationEvmChainId:
          type: string
        messageNonce:
          type: string
        from:
          type: string
        to:
          type: string
        data:
          type: string
        messageExecuted:
          type: boolean
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/TeleporterReceipt'
        receiptDelivered:
          type: boolean
        rewardDetails:
          $ref: '#/components/schemas/TeleporterRewardDetails'
        destinationTransaction:
          $ref: '#/components/schemas/TeleporterDestinationTransaction'
        status:
          type: string
          enum:
            - delivered_source_not_indexed
      required:
        - messageId
        - teleporterContractAddress
        - sourceBlockchainId
        - destinationBlockchainId
        - sourceEvmChainId
        - destinationEvmChainId
        - messageNonce
        - from
        - to
        - messageExecuted
        - receipts
        - receiptDelivered
        - rewardDetails
        - destinationTransaction
        - status
    NextPageToken:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
    ListTeleporterMessagesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        messages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PendingTeleporterMessage'
              - $ref: '#/components/schemas/DeliveredTeleporterMessage'
              - $ref: '#/components/schemas/DeliveredSourceNotIndexedIcmMessage'
            discriminator:
              propertyName: status
              mapping:
                pending: '#/components/schemas/PendingTeleporterMessage'
                delivered: '#/components/schemas/DeliveredTeleporterMessage'
                delivered_source_not_indexed: '#/components/schemas/DeliveredSourceNotIndexedIcmMessage'
      required:
        - messages
    IcmReceipt:
      type: object
      properties:
        receivedMessageNonce:
          type: string
        relayerRewardAddress:
          type: string
      required:
        - receivedMessageNonce
        - relayerRewardAddress
    IcmRewardDetails:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        logoUri:
          type: string
          description: The logo uri for the address.
          examples:
            - >-
              https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg
        ercType:
          type: string
          enum:
            - ERC-20
        price:
          description: The token price, if available.
          allOf:
            - $ref: '#/components/schemas/Money'
        value:
          type: string
      required:
        - address
        - name
        - symbol
        - decimals
        - ercType
        - value
    IcmSourceTransaction:
      type: object
      properties:
        txHash:
          type: string
        timestamp:
          type: number
        gasSpent:
          type: string
      required:
        - txHash
        - timestamp
        - gasSpent
    PendingIcmMessage:
      type: object
      properties:
        messageId:
          type: string
        icmContractAddress:
          type: string
        sourceBlockchainId:
          type: string
        destinationBlockchainId:
          type: string
        sourceEvmChainId:
          type: string
        destinationEvmChainId:
          type: string
        messageNonce:
          type: string
        from:
          type: string
        to:
          type: string
        data:
          type: string
        messageExecuted:
          type: boolean
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/IcmReceipt'
        receiptDelivered:
          type: boolean
        rewardDetails:
          $ref: '#/components/schemas/IcmRewardDetails'
        sourceTransaction:
          $ref: '#/components/schemas/IcmSourceTransaction'
        status:
          type: string
          enum:
            - pending
      required:
        - messageId
        - icmContractAddress
        - sourceBlockchainId
        - destinationBlockchainId
        - sourceEvmChainId
        - destinationEvmChainId
        - messageNonce
        - from
        - to
        - messageExecuted
        - receipts
        - receiptDelivered
        - rewardDetails
        - sourceTransaction
        - status
    IcmDestinationTransaction:
      type: object
      properties:
        txHash:
          type: string
        timestamp:
          type: number
        gasSpent:
          type: string
        rewardRedeemer:
          type: string
        delivererAddress:
          type: string
      required:
        - txHash
        - timestamp
        - gasSpent
        - rewardRedeemer
        - delivererAddress
    DeliveredIcmMessage:
      type: object
      properties:
        messageId:
          type: string
        icmContractAddress:
          type: string
        sourceBlockchainId:
          type: string
        destinationBlockchainId:
          type: string
        sourceEvmChainId:
          type: string
        destinationEvmChainId:
          type: string
        messageNonce:
          type: string
        from:
          type: string
        to:
          type: string
        data:
          type: string
        messageExecuted:
          type: boolean
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/IcmReceipt'
        receiptDelivered:
          type: boolean
        rewardDetails:
          $ref: '#/components/schemas/IcmRewardDetails'
        sourceTransaction:
          $ref: '#/components/schemas/IcmSourceTransaction'
        destinationTransaction:
          $ref: '#/components/schemas/IcmDestinationTransaction'
        status:
          type: string
          enum:
            - delivered
      required:
        - messageId
        - icmContractAddress
        - sourceBlockchainId
        - destinationBlockchainId
        - sourceEvmChainId
        - destinationEvmChainId
        - messageNonce
        - from
        - to
        - messageExecuted
        - receipts
        - receiptDelivered
        - rewardDetails
        - sourceTransaction
        - destinationTransaction
        - status
    DeliveredSourceNotIndexedIcmMessage:
      type: object
      properties:
        messageId:
          type: string
        icmContractAddress:
          type: string
        sourceBlockchainId:
          type: string
        destinationBlockchainId:
          type: string
        sourceEvmChainId:
          type: string
        destinationEvmChainId:
          type: string
        messageNonce:
          type: string
        from:
          type: string
        to:
          type: string
        data:
          type: string
        messageExecuted:
          type: boolean
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/IcmReceipt'
        receiptDelivered:
          type: boolean
        rewardDetails:
          $ref: '#/components/schemas/IcmRewardDetails'
        destinationTransaction:
          $ref: '#/components/schemas/IcmDestinationTransaction'
        status:
          type: string
          enum:
            - delivered_source_not_indexed
      required:
        - messageId
        - icmContractAddress
        - sourceBlockchainId
        - destinationBlockchainId
        - sourceEvmChainId
        - destinationEvmChainId
        - messageNonce
        - from
        - to
        - messageExecuted
        - receipts
        - receiptDelivered
        - rewardDetails
        - destinationTransaction
        - status
    ListIcmMessagesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        messages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PendingIcmMessage'
              - $ref: '#/components/schemas/DeliveredIcmMessage'
              - $ref: '#/components/schemas/DeliveredSourceNotIndexedIcmMessage'
            discriminator:
              propertyName: status
              mapping:
                pending: '#/components/schemas/PendingIcmMessage'
                delivered: '#/components/schemas/DeliveredIcmMessage'
                delivered_source_not_indexed: '#/components/schemas/DeliveredSourceNotIndexedIcmMessage'
      required:
        - messages
    TimeIntervalGranularityExtended:
      type: string
      enum:
        - minute
        - hourly
        - daily
        - weekly
        - monthly
    UsageMetricsGroupByEnum:
      type: string
      enum:
        - requestPath
        - responseCode
        - chainId
        - apiKeyId
        - requestType
    UsageMetricsValueDTO:
      type: object
      properties:
        groupedBy:
          type: string
          description: Column name used for data aggregation
          enum:
            - requestPath
            - responseCode
            - chainId
            - apiKeyId
            - requestType
            - None
        groupValue:
          description: The value of the column used for data aggregation
          oneOf:
            - type: string
            - type: number
        totalRequests:
          type: number
          description: The total number of requests
        requestsPerSecond:
          type: number
          description: The number of requests per second
        successRatePercent:
          type: number
          description: The success rate percentage
        medianResponseTimeMsecs:
          type: number
          description: The median response time in milliseconds
        invalidRequests:
          type: number
          description: The number of invalid requests
        apiCreditsUsed:
          type: number
          description: The number of API credits used
        apiCreditsWasted:
          type: number
          description: The number of API credits wasted on invalid requests
      required:
        - groupedBy
        - totalRequests
        - requestsPerSecond
        - successRatePercent
        - medianResponseTimeMsecs
        - invalidRequests
        - apiCreditsUsed
        - apiCreditsWasted
    Metric:
      type: object
      properties:
        timestamp:
          type: number
          description: The timestamp of the metrics value
        values:
          description: The metrics values for the timestamp
          type: array
          items:
            $ref: '#/components/schemas/UsageMetricsValueDTO'
      required:
        - timestamp
        - values
    UsageMetricsResponseDTO:
      type: object
      properties:
        aggregateDuration:
          type: string
          description: Duration in which the metrics value is aggregated
        orgId:
          type: string
          description: Org ID for which the metrics are aggregated
        metrics:
          description: Metrics values
          type: array
          items:
            $ref: '#/components/schemas/Metric'
      required:
        - aggregateDuration
        - orgId
        - metrics
    RequestType:
      type: string
      description: The type of request made by the client.
      enum:
        - data
        - rpc
    LogsFormatMetadata:
      type: object
      properties:
        ipAddress:
          type: string
          description: The IP address of the client that made the request.
        host:
          type: string
          description: The host for the request made by the client.
        userAgent:
          type: string
          description: The user agent of the client that made the request.
      required:
        - ipAddress
        - host
        - userAgent
    LogsFormat:
      type: object
      properties:
        orgId:
          type: string
          description: The organization id of the request.
        logId:
          type: string
          description: The unique log id of the request.
        eventTimestamp:
          type: number
          description: The timestamp of the request.
        apiKeyId:
          type: string
          description: The apiKey used to make the request.
        apiKeyAlias:
          type: string
          description: The alias of the apiKey used to make the request.
        hostRegion:
          type: string
          description: The region of the host for the request made by the client.
        requestType:
          examples:
            - rpc
          $ref: '#/components/schemas/RequestType'
        requestPath:
          type: string
          description: The path of the request made by the client.
        apiCreditsConsumed:
          type: number
          description: The number of API credits consumed by the request.
        requestDurationMsecs:
          type: number
          description: The duration of the request in milliseconds.
        responseCode:
          type: number
          description: The response code of the request.
        chainId:
          type: string
          description: The chain id of the request.
        rpcMethod:
          type: string
          description: The rpc method of the request.
        metadata:
          description: The metadata of the request.
          allOf:
            - $ref: '#/components/schemas/LogsFormatMetadata'
      required:
        - orgId
        - logId
        - eventTimestamp
        - apiKeyId
        - apiKeyAlias
        - hostRegion
        - requestType
        - requestPath
        - apiCreditsConsumed
        - requestDurationMsecs
        - responseCode
        - metadata
    LogsResponseDTO:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        orgId:
          type: string
          description: The organization id of the request.
        logs:
          description: An array of logs representing the requests made by clients.
          type: array
          items:
            $ref: '#/components/schemas/LogsFormat'
      required:
        - orgId
        - logs
    SubnetRpcTimeIntervalGranularity:
      type: string
      enum:
        - hourly
        - daily
        - weekly
        - monthly
    RpcUsageMetricsGroupByEnum:
      type: string
      enum:
        - rpcMethod
        - responseCode
        - rlBypassToken
    RpcUsageMetricsValueAggregated:
      type: object
      properties:
        totalRequests:
          type: number
          description: The total number of requests
        apiCreditsUsed:
          type: number
          description: The number of API credits used
        requestsPerSecond:
          type: number
          description: The number of requests per second
        successRatePercent:
          type: number
          description: The success rate percentage
        medianResponseTimeMsecs:
          type: number
          description: The median response time in milliseconds
        invalidRequests:
          type: number
          description: The number of invalid requests
        apiCreditsWasted:
          type: number
          description: The number of API credits wasted on invalid requests
        groupedBy:
          type: string
          description: Column name used for data aggregation
          enum:
            - rpcMethod
            - responseCode
            - rlBypassToken
            - requestPath
            - country
            - continent
            - userAgent
            - None
        groupValue:
          description: The value of the column used for data aggregation
          oneOf:
            - type: string
            - type: number
      required:
        - totalRequests
        - apiCreditsUsed
        - requestsPerSecond
        - successRatePercent
        - medianResponseTimeMsecs
        - invalidRequests
        - apiCreditsWasted
        - groupedBy
    RpcMetrics:
      type: object
      properties:
        timestamp:
          type: number
          description: The timestamp of the metrics value
        values:
          description: The metrics values for the timestamp
          type: array
          items:
            $ref: '#/components/schemas/RpcUsageMetricsValueAggregated'
      required:
        - timestamp
        - values
    SubnetRpcUsageMetricsResponseDTO:
      type: object
      properties:
        aggregateDuration:
          type: string
          description: Duration in which the metrics value is aggregated
        metrics:
          description: Metrics values
          type: array
          items:
            $ref: '#/components/schemas/RpcMetrics'
        chainId:
          type: string
          description: ChainId for which the metrics are aggregated
      required:
        - aggregateDuration
        - metrics
        - chainId
    PrimaryNetworkRpcTimeIntervalGranularity:
      type: string
      enum:
        - hourly
        - daily
        - weekly
        - monthly
    PrimaryNetworkRpcMetricsGroupByEnum:
      type: string
      enum:
        - rpcMethod
        - requestPath
        - responseCode
        - country
        - continent
        - userAgent
    PrimaryNetworkRpcUsageMetricsResponseDTO:
      type: object
      properties:
        aggregateDuration:
          type: string
          description: Duration in which the metrics value is aggregated
        metrics:
          description: Metrics values
          type: array
          items:
            $ref: '#/components/schemas/RpcMetrics'
        network:
          type: string
          description: Network type for which the metrics are aggregated
          enum:
            - mainnet
            - testnet
          examples:
            - mainnet
      required:
        - aggregateDuration
        - metrics
        - network
    WebhookStatusType:
      type: string
      enum:
        - active
        - inactive
    AddressActivityEventType:
      type: string
      enum:
        - address_activity
    AddressActivityMetadata:
      type: object
      properties:
        eventSignatures:
          description: Array of hexadecimal strings of the event signatures.
          examples:
            - - >-
                0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64
          type: array
          items:
            type: string
        addresses:
          description: >-
            Ethereum address(es) for the address_activity event type. The
            maximum number of 'addresses' you can track depends  on the Data API
            plan you are subscribed to.
          examples:
            - - '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'
          type: array
          items:
            type: string
      required:
        - addresses
    EVMAddressActivityResponse:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        chainId:
          type: string
        status:
          $ref: '#/components/schemas/WebhookStatusType'
        createdAt:
          type: number
        name:
          type: string
        description:
          type: string
        eventType:
          $ref: '#/components/schemas/AddressActivityEventType'
        metadata:
          $ref: '#/components/schemas/AddressActivityMetadata'
        includeInternalTxs:
          type: boolean
          description: Whether to include traces in the webhook payload.
        includeLogs:
          type: boolean
          description: Whether to include logs in the webhook payload.
      required:
        - id
        - url
        - chainId
        - status
        - createdAt
        - name
        - description
        - eventType
        - metadata
    PrimaryNetworkAddressActivityEventType:
      type: string
      enum:
        - primary_network_address_activity
    PlatformAddressActivityKeyType:
      type: string
      description: The type of key to monitor for the address activity event type.
      enum:
        - addresses
    PrimaryNetworkAddressActivitySubEventType:
      type: string
      description: Array of address activity sub-event types
      enum:
        - balance_change
        - balance_threshold
        - reward_distribution
    PrimaryNetworkAddressActivitySubEvents:
      type: object
      properties:
        addressActivitySubEvents:
          type: array
          items:
            $ref: '#/components/schemas/PrimaryNetworkAddressActivitySubEventType'
      required:
        - addressActivitySubEvents
    CommonBalanceType:
      type: string
      description: Type of balance to monitor
      enum:
        - unlockedUnstaked
        - unlockedStaked
        - lockedPlatform
        - lockedStakeable
        - lockedStaked
        - pendingStaked
        - unlocked
        - locked
        - atomicMemoryUnlocked
        - atomicMemoryLocked
    PrimaryNetworkBalanceThresholdFilter:
      type: object
      properties:
        balanceType:
          $ref: '#/components/schemas/CommonBalanceType'
        balanceThreshold:
          type: string
          description: Threshold for balance corresponding to balanceType in nAVAX
      required:
        - balanceType
        - balanceThreshold
    PrimaryNetworkAddressActivityMetadata:
      type: object
      properties:
        eventSignatures:
          description: Array of hexadecimal strings of the event signatures.
          examples:
            - - >-
                0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64
          type: array
          items:
            type: string
        keyType:
          $ref: '#/components/schemas/PlatformAddressActivityKeyType'
        keys:
          description: >-
            Array of keys like addresses corresponding to the keyType being
            monitored. For PrimaryNetworkAddressActivity event, an array of
            multiple addresses can be provided. The maximum number of
            'addresses' you can track depends on the Data API plan you are
            subscribed to.
          type: array
          items:
            type: string
        subEvents:
          description: Sub-events to monitor
          allOf:
            - $ref: '#/components/schemas/PrimaryNetworkAddressActivitySubEvents'
        balanceThresholdFilter:
          description: Balance threshold filter
          allOf:
            - $ref: '#/components/schemas/PrimaryNetworkBalanceThresholdFilter'
      required:
        - keyType
        - keys
        - subEvents
    PrimaryNetworkAddressActivityResponse:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        chainId:
          type: string
        status:
          $ref: '#/components/schemas/WebhookStatusType'
        createdAt:
          type: number
        name:
          type: string
        description:
          type: string
        eventType:
          $ref: '#/components/schemas/PrimaryNetworkAddressActivityEventType'
        metadata:
          $ref: '#/components/schemas/PrimaryNetworkAddressActivityMetadata'
      required:
        - id
        - url
        - chainId
        - status
        - createdAt
        - name
        - description
        - eventType
        - metadata
    ValidatorActivityEventType:
      type: string
      enum:
        - validator_activity
    ValidatorActivityKeyType:
      type: string
      description: The type of key to monitor for the validator activity event type.
      enum:
        - nodeId
        - subnetId
    ValidatorActivitySubEvents:
      type: object
      properties:
        validatorActivitySubEvents:
          type: array
          description: Array of validator activity sub-event types
          items:
            type: string
            enum:
              - validator_stake
              - delegator_stake
              - reward_distribution
              - l1_validator_balance_increased
              - l1_validator_disabled
              - l1_validator_removed
              - l1_validator_balance_threshold
      required:
        - validatorActivitySubEvents
    ValidatorActivityMetadata:
      type: object
      properties:
        eventSignatures:
          description: Array of hexadecimal strings of the event signatures.
          examples:
            - - >-
                0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64
          type: array
          items:
            type: string
        keyType:
          $ref: '#/components/schemas/ValidatorActivityKeyType'
        keys:
          description: >-
            Array of keys like NodeID or SubnetID corresponding to the keyType
            being monitored. ValidatorActivity event will only accept a single
            key
          type: array
          items:
            type: string
        subEvents:
          description: Sub-events to monitor
          allOf:
            - $ref: '#/components/schemas/ValidatorActivitySubEvents'
        nodeIds:
          description: Array of node IDs to filter the events
          type: array
          items:
            type: string
        subnetIds:
          description: Array of subnet IDs to filter the events
          type: array
          items:
            type: string
        l1ValidatorFeeBalanceThreshold:
          type: string
          description: L1 validator fee balance threshold in nAVAX
      required:
        - keyType
        - keys
        - subEvents
    ValidatorActivityResponse:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        chainId:
          type: string
        status:
          $ref: '#/components/schemas/WebhookStatusType'
        createdAt:
          type: number
        name:
          type: string
        description:
          type: string
        eventType:
          $ref: '#/components/schemas/ValidatorActivityEventType'
        metadata:
          $ref: '#/components/schemas/ValidatorActivityMetadata'
      required:
        - id
        - url
        - chainId
        - status
        - createdAt
        - name
        - description
        - eventType
        - metadata
    EVMAddressActivityRequest:
      type: object
      properties:
        eventType:
          type: string
          enum:
            - address_activity
        url:
          type: string
        name:
          type: string
        description:
          type: string
        chainId:
          type: string
        metadata:
          oneOf:
            - $ref: '#/components/schemas/AddressActivityMetadata'
        includeInternalTxs:
          type: boolean
          description: >-
            Whether to include traces in the webhook payload. Traces are only
            available for C-Chain on chainId 43113 and 43114.
        includeLogs:
          type: boolean
          description: Whether to include logs in the webhook payload.
      required:
        - eventType
        - url
        - chainId
        - metadata
    PrimaryNetworkType:
      type: string
      enum:
        - mainnet
        - fuji
    PrimaryNetworkAddressActivityRequest:
      type: object
      properties:
        eventType:
          type: string
          enum:
            - primary_network_address_activity
        url:
          type: string
        name:
          type: string
        description:
          type: string
        network:
          $ref: '#/components/schemas/PrimaryNetworkType'
        chainId:
          type: string
        metadata:
          description: Metadata for platform address activity event
          oneOf:
            - $ref: '#/components/schemas/PrimaryNetworkAddressActivityMetadata'
          allOf:
            - $ref: '#/components/schemas/PrimaryNetworkAddressActivityMetadata'
      required:
        - eventType
        - url
        - network
        - chainId
        - metadata
    ValidatorActivityRequest:
      type: object
      properties:
        eventType:
          type: string
          enum:
            - validator_activity
        url:
          type: string
        name:
          type: string
        description:
          type: string
        network:
          $ref: '#/components/schemas/PrimaryNetworkType'
        metadata:
          description: Metadata for platform validator activity event
          oneOf:
            - $ref: '#/components/schemas/ValidatorActivityMetadata'
          allOf:
            - $ref: '#/components/schemas/ValidatorActivityMetadata'
      required:
        - eventType
        - url
        - network
        - metadata
    ERCToken:
      type: object
      properties:
        address:
          type: string
          description: Token contract address
          examples:
            - '0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7'
        name:
          type: string
          description: Token name
          examples:
            - TetherToken
        symbol:
          type: string
          description: Token symbol
          examples:
            - USDt
        decimals:
          type: number
          description: Token decimals
          examples:
            - 6
        valueWithDecimals:
          type: string
          description: Value including decimals
          examples:
            - '3331.009129'
      required:
        - address
        - name
        - symbol
        - decimals
        - valueWithDecimals
    ERCTransfer:
      type: object
      properties:
        transactionHash:
          type: string
          description: Transaction hash
          examples:
            - '0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8'
        type:
          type: string
          description: Transfer type
          examples:
            - ERC20
        from:
          type: string
          description: Sender address
          examples:
            - '0x737F6b0b8A04e8462d0fC7076451298F0dA9a972'
        to:
          type: string
          description: Recipient address
          examples:
            - '0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B'
        value:
          type: string
          description: Amount transferred
          examples:
            - '3331009129'
        tokenId:
          type: string
          description: Token Id
          examples:
            - '2'
        blockTimestamp:
          type: number
          description: Block timestamp
          examples:
            - 1640995200
        logIndex:
          type: number
          description: Log index
          examples:
            - 5
        erc20Token:
          description: erc20 Token details
          allOf:
            - $ref: '#/components/schemas/ERCToken'
        erc721Token:
          description: erc721 Token details
          allOf:
            - $ref: '#/components/schemas/ERCToken'
        erc1155Token:
          description: erc1155 Token details
          allOf:
            - $ref: '#/components/schemas/ERCToken'
      required:
        - transactionHash
        - type
        - from
        - to
        - value
        - blockTimestamp
        - logIndex
    WebhookInternalTransaction:
      type: object
      properties:
        from:
          type: string
          description: Sender address
          examples:
            - '0x737F6b0b8A04e8462d0fC7076451298F0dA9a972'
        to:
          type: string
          description: Recipient address
          examples:
            - '0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7'
        internalTxType:
          type: string
          description: Internal transaction type
          examples:
            - call
        value:
          type: string
          description: Value transferred
          examples:
            - '50000000000000000'
        gasUsed:
          type: string
          description: Gas used
          examples:
            - '44038'
        gasLimit:
          type: string
          description: Gas limit
          examples:
            - '50000'
        transactionHash:
          type: string
          description: Transaction hash
          examples:
            - '0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8'
      required:
        - from
        - to
        - internalTxType
        - value
        - gasUsed
        - gasLimit
        - transactionHash
    AccessListData:
      type: object
      properties:
        accessAddresses:
          type: string
          description: Access Address
          examples:
            - '0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7'
        storageKeys:
          description: Storage keys
          type: array
          items:
            type: string
      required:
        - accessAddresses
        - storageKeys
    NetworkTokenInfo:
      type: object
      properties:
        tokenName:
          type: string
          description: Token name
          examples:
            - TetherToken
        tokenSymbol:
          type: string
          description: Token symbol
          examples:
            - USDt
        tokenDecimals:
          type: number
          description: Token decimals
          examples:
            - 6
        valueWithDecimals:
          type: string
          description: Value including decimals
          examples:
            - '3331.009129'
    Transaction:
      type: object
      properties:
        blockHash:
          type: string
          description: Block hash of the transaction
          examples:
            - '0x2a47bebed93db4a21cc8339980f004cc67f17d0dff4a368001e450e7be2edaa0'
        blockNumber:
          type: string
          description: Block number of the transaction
          examples:
            - '45396106'
        from:
          type: string
          description: Sender address
          examples:
            - '0x737F6b0b8A04e8462d0fC7076451298F0dA9a972'
        gas:
          type: string
          description: Gas limit for the transaction
          examples:
            - '80000'
        gasPrice:
          type: string
          description: Gas price used
          examples:
            - '52000000000'
        maxFeePerGas:
          type: string
          description: Maximum fee per gas
          examples:
            - '52000000000'
        maxPriorityFeePerGas:
          type: string
          description: Maximum priority fee per gas
          examples:
            - '2000000000'
        txHash:
          type: string
          description: Transaction hash
          examples:
            - '0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8'
        txStatus:
          type: string
          description: Transaction status
          examples:
            - '1'
        input:
          type: string
          description: Input data
          examples:
            - >-
              0xa9059cbb00000000000000000000000040e832c3df9562dfae5a86a4849f27f687a9b46b00000000000000000000000000000000000000000000000000000000c68b2a69
        nonce:
          type: string
          description: Nonce value
          examples:
            - '0'
        to:
          type: string
          description: Recipient address
          examples:
            - '0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7'
        transactionIndex:
          type: number
          description: Transaction index
          examples:
            - 1
        value:
          type: string
          description: Value transferred in the transaction
          examples:
            - '0'
        type:
          type: number
          description: Transaction type
          examples:
            - 2
        chainId:
          type: string
          description: Chain ID of the network
          examples:
            - '43114'
        receiptCumulativeGasUsed:
          type: string
          description: Cumulative gas used
          examples:
            - '668508'
        receiptGasUsed:
          type: string
          description: Gas used
          examples:
            - '44038'
        receiptEffectiveGasPrice:
          type: string
          description: Effective gas price
          examples:
            - '27000000000'
        receiptRoot:
          type: string
          description: Receipt root
          examples:
            - '0xe5b018c29a77c8a92c4ea2f2d7e58820283041a52e14a0620d90d13b881e1ee3'
        blockTimestamp:
          type: number
          description: Block timestamp
          examples:
            - 1715621840
        contractAddress:
          type: string
          description: Contract address (optional)
          examples:
            - '0x0000000000000000000000000000000000000000'
        erc20Transfers:
          description: ERC20 transfers
          type: array
          items:
            $ref: '#/components/schemas/ERCTransfer'
        erc721Transfers:
          description: ERC721 transfers
          type: array
          items:
            $ref: '#/components/schemas/ERCTransfer'
        erc1155Transfers:
          description: ERC1155 transfers
          type: array
          items:
            $ref: '#/components/schemas/ERCTransfer'
        internalTransactions:
          description: Internal transactions (optional)
          type: array
          items:
            $ref: '#/components/schemas/WebhookInternalTransaction'
        accessList:
          description: Access list (optional)
          type: array
          items:
            $ref: '#/components/schemas/AccessListData'
        networkToken:
          description: Network token info (optional)
          allOf:
            - $ref: '#/components/schemas/NetworkTokenInfo'
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - maxFeePerGas
        - maxPriorityFeePerGas
        - txHash
        - txStatus
        - input
        - nonce
        - to
        - transactionIndex
        - value
        - type
        - chainId
        - receiptCumulativeGasUsed
        - receiptGasUsed
        - receiptEffectiveGasPrice
        - receiptRoot
        - blockTimestamp
        - erc20Transfers
        - erc721Transfers
        - erc1155Transfers
    Log:
      type: object
      properties:
        address:
          type: string
          description: Contract address
          examples:
            - '0x54C800d2331E10467143911aabCa092d68bF4166'
        topic0:
          type: string
          description: First topic
          examples:
            - '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925'
        topic1:
          type: string
          description: Second topic (optional)
          examples:
            - '0x0000000000000000000000000000333883f313ad709f583d0a3d2e18a44ef29b'
        topic2:
          type: string
          description: Third topic (optional)
          examples:
            - '0x0000000000000000000000000000000000000000000000000000000000000000'
        topic3:
          type: string
          description: Fourth topic (optional)
          examples:
            - '0x0000000000000000000000000000000000000000000000000000000000001350'
        data:
          type: string
          description: Event data
          examples:
            - 0x
        transactionIndex:
          type: number
          description: Transaction index
          examples:
            - 2
        logIndex:
          type: number
          description: Log index
          examples:
            - 10
        removed:
          type: boolean
          description: Indicates if the log was removed
          examples:
            - false
      required:
        - address
        - topic0
        - data
        - transactionIndex
        - logIndex
        - removed
    TransactionEvent:
      type: object
      properties:
        transaction:
          description: Transaction details
          allOf:
            - $ref: '#/components/schemas/Transaction'
        logs:
          description: Array of log events
          type: array
          items:
            $ref: '#/components/schemas/Log'
      required:
        - transaction
    WebhookAddressActivityResponse:
      type: object
      properties:
        webhookId:
          type: string
          description: Webhook ID
          examples:
            - 401da7d9-d6d7-46c8-b431-72ff1e1543f4
        eventType:
          type: string
          description: Event type
          enum:
            - address_activity
          examples:
            - address_activity
        messageId:
          type: string
          description: Message ID
          examples:
            - bc9732db-2430-4296-afc3-c51267beb14a
        event:
          description: Event details
          allOf:
            - $ref: '#/components/schemas/TransactionEvent'
      required:
        - webhookId
        - eventType
        - messageId
        - event
    WebhookStatus:
      type: string
      enum:
        - active
        - inactive
    ListWebhooksResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        webhooks:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/EVMAddressActivityResponse'
              - $ref: '#/components/schemas/PrimaryNetworkAddressActivityResponse'
              - $ref: '#/components/schemas/ValidatorActivityResponse'
      required:
        - webhooks
    SharedSecretsResponse:
      type: object
      properties:
        secret:
          type: string
      required:
        - secret
    UpdateWebhookRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        url:
          type: string
        status:
          $ref: '#/components/schemas/WebhookStatusType'
        includeInternalTxs:
          type: boolean
          description: >-
            Whether to include traces in the webhook payload. Traces are only
            available for C-Chain on chainId 43113 and 43114.
        includeLogs:
          type: boolean
    AddressesChangeRequest:
      type: object
      properties:
        addresses:
          description: Ethereum address(es) for the address_activity event type
          examples:
            - - '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'
          type: array
          items:
            type: string
      required:
        - addresses
    ListWebhookAddressesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        addresses:
          type: array
          items:
            type: string
        totalAddresses:
          type: number
      required:
        - addresses
        - totalAddresses
    SignatureAggregatorRequest:
      type: object
      properties:
        message:
          type: string
          examples:
            - >-
              000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003cc0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000
        justification:
          type: string
          examples:
            - 0001abcdabcfff
        signingSubnetId:
          type: string
          examples:
            - 7WtoAMPhrmh5KosDUsFL9yTcvw7YSxiKHPpdfs4JsgW47oZT5
        quorumPercentage:
          type: number
          examples:
            - 50
      required:
        - message
    SignatureAggregationResponse:
      type: object
      properties:
        signedMessage:
          type: string
          examples:
            - >-
              0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000103807355b21dd497ecc9f560dfbdefc64aeec72b226c70d3793273db01d1a0c0bfd74d095d6a9e0b4db2dc652245fd28ac032c0f1f6b7f761b912ad58c93cde2e337bef4a4e8175af69f226520cd1baedd2dd7db79bb5752cb50a465531e46e8af
      required:
        - signedMessage
    NativeTokenBalance:
      type: object
      properties:
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        logoUri:
          type: string
          description: The logo uri for the address.
          examples:
            - >-
              https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg
        chainId:
          type: string
          description: The evm chain id.
          examples:
            - '43114'
        price:
          description: The token price, if available.
          allOf:
            - $ref: '#/components/schemas/Money'
        balance:
          type: string
          description: >-
            The address balance for the token, in units specified by the
            `decimals` value for the contract.
          examples:
            - '2000000000000000000'
        balanceValue:
          description: >-
            The monetary value of the balance, if a price is available for the
            token.
          allOf:
            - $ref: '#/components/schemas/Money'
      required:
        - name
        - symbol
        - decimals
        - chainId
        - balance
    GetNativeBalanceResponse:
      type: object
      properties:
        nativeTokenBalance:
          description: The native token balance for the address.
          allOf:
            - $ref: '#/components/schemas/NativeTokenBalance'
      required:
        - nativeTokenBalance
    Erc20TokenBalance:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        logoUri:
          type: string
          description: The logo uri for the address.
          examples:
            - >-
              https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg
        ercType:
          type: string
          enum:
            - ERC-20
        price:
          description: The token price, if available.
          allOf:
            - $ref: '#/components/schemas/Money'
        chainId:
          type: string
          description: The evm chain id.
          examples:
            - '43114'
        balance:
          type: string
          description: >-
            The address balance for the token, in units specified by the
            `decimals` value for the contract.
          examples:
            - '2000000000000000000'
        balanceValue:
          description: >-
            The monetary value of the balance, if a price is available for the
            token.
          allOf:
            - $ref: '#/components/schemas/Money'
        tokenReputation:
          type:
            - string
            - 'null'
          enum:
            - Malicious
            - Benign
          description: >-
            Indicates the reputation of the token based on a security analysis.
            'Benign' suggests the token is likely safe, while 'Malicious' 
            indicates potential security risks. This field is nullable and is
            only populated for tokens on the C-Chain. Possible values are
            'Benign', 'Malicious', or null if the  reputation is unknown.
          examples:
            - Malicious
            - Benign
            - null
      required:
        - address
        - name
        - symbol
        - decimals
        - ercType
        - chainId
        - balance
        - tokenReputation
    ListErc20BalancesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        nativeTokenBalance:
          description: The native token balance for the address.
          allOf:
            - $ref: '#/components/schemas/NativeTokenBalance'
        erc20TokenBalances:
          description: The list of ERC-20 token balances for the address.
          type: array
          items:
            $ref: '#/components/schemas/Erc20TokenBalance'
      required:
        - nativeTokenBalance
        - erc20TokenBalances
    Erc721TokenBalance:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        ercType:
          type: string
          enum:
            - ERC-721
        tokenId:
          type: string
        tokenUri:
          type: string
        metadata:
          $ref: '#/components/schemas/Erc721TokenMetadata'
        ownerAddress:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        chainId:
          type: string
          description: The evm chain id.
          examples:
            - '43114'
      required:
        - address
        - name
        - symbol
        - ercType
        - tokenId
        - tokenUri
        - metadata
        - chainId
    ListErc721BalancesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        nativeTokenBalance:
          description: The native token balance for the address.
          allOf:
            - $ref: '#/components/schemas/NativeTokenBalance'
        erc721TokenBalances:
          description: The list of ERC-721 token balances for the address.
          type: array
          items:
            $ref: '#/components/schemas/Erc721TokenBalance'
      required:
        - nativeTokenBalance
        - erc721TokenBalances
    Erc1155TokenBalance:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        ercType:
          type: string
          enum:
            - ERC-1155
        tokenId:
          type: string
        tokenUri:
          type: string
        metadata:
          $ref: '#/components/schemas/Erc1155TokenMetadata'
        chainId:
          type: string
          description: The evm chain id.
          examples:
            - '43114'
        balance:
          type: string
          description: >-
            The address balance for the token, in units specified by the
            `decimals` value for the contract.
          examples:
            - '2000000000000000000'
      required:
        - address
        - ercType
        - tokenId
        - tokenUri
        - metadata
        - chainId
        - balance
    ListErc1155BalancesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        nativeTokenBalance:
          description: The native token balance for the address.
          allOf:
            - $ref: '#/components/schemas/NativeTokenBalance'
        erc1155TokenBalances:
          description: The list of ERC-1155 token balances for the address.
          type: array
          items:
            $ref: '#/components/schemas/Erc1155TokenBalance'
      required:
        - nativeTokenBalance
        - erc1155TokenBalances
    ListCollectibleBalancesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        collectibleBalances:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Erc721TokenBalance'
              - $ref: '#/components/schemas/Erc1155TokenBalance'
          description: The list of ERC-721 and ERC-1155 token balances for the address.
      required:
        - collectibleBalances
    GetEvmBlockResponse:
      type: object
      properties:
        chainId:
          type: string
          description: The EVM chain ID on which the block was created.
          examples:
            - '43114'
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        txCount:
          type: number
          description: The number of evm transactions in the block.
        baseFee:
          type: string
          description: The base gas fee for a transaction to be included in the block.
        gasUsed:
          type: string
          description: The gas used for transactions in the block.
        gasLimit:
          type: string
          description: The total gas limit set for transactions in the block.
        gasCost:
          type: string
        parentHash:
          type: string
          description: The hash of the parent block.
        feesSpent:
          type: string
          description: The amount of fees spent/burned for transactions in the block.
        cumulativeTransactions:
          type: string
          description: >-
            The cumulative number of transactions for the chain including this
            block.
      required:
        - chainId
        - blockNumber
        - blockTimestamp
        - blockHash
        - txCount
        - baseFee
        - gasUsed
        - gasLimit
        - gasCost
        - parentHash
        - feesSpent
        - cumulativeTransactions
    Erc20Token:
      type: object
      properties:
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        logoUri:
          type: string
          description: The logo uri for the address.
          examples:
            - >-
              https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg
        ercType:
          type: string
          enum:
            - ERC-20
        price:
          description: The token price, if available.
          allOf:
            - $ref: '#/components/schemas/Money'
      required:
        - address
        - name
        - symbol
        - decimals
        - ercType
    Erc20TransferDetails:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        logIndex:
          type: number
        value:
          type: string
          examples:
            - '10000000000000000000'
        erc20Token:
          $ref: '#/components/schemas/Erc20Token'
      required:
        - from
        - to
        - logIndex
        - value
        - erc20Token
    Erc721TransferDetails:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        logIndex:
          type: number
        erc721Token:
          $ref: '#/components/schemas/Erc721Token'
      required:
        - from
        - to
        - logIndex
        - erc721Token
    Erc1155TransferDetails:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        logIndex:
          type: number
        value:
          type: string
          examples:
            - '10000000000000000000'
        erc1155Token:
          $ref: '#/components/schemas/Erc1155Token'
      required:
        - from
        - to
        - logIndex
        - value
        - erc1155Token
    InternalTransactionOpCall:
      type: string
      enum:
        - UNKNOWN
        - CALL
        - CREATE
        - CREATE2
        - CREATE3
        - CALLCODE
        - DELEGATECALL
        - STATICCALL
    InternalTransactionDetails:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        internalTxType:
          $ref: '#/components/schemas/InternalTransactionOpCall'
        value:
          type: string
          examples:
            - '10000000000000000000'
        isReverted:
          type: boolean
          description: True if the internal transaction was reverted.
        gasUsed:
          type: string
        gasLimit:
          type: string
      required:
        - from
        - to
        - internalTxType
        - value
        - isReverted
        - gasUsed
        - gasLimit
    NetworkTokenDetails:
      type: object
      properties:
        networkToken:
          $ref: '#/components/schemas/NetworkToken'
        currentPrice:
          description: The current token price, if available.
          allOf:
            - $ref: '#/components/schemas/Money'
        historicalPrice:
          description: >-
            The historical token price at the time the transaction occured, if
            available. Note, this is only provided if the transaction occured
            more than 24 hours ago.
          allOf:
            - $ref: '#/components/schemas/Money'
      required:
        - networkToken
    FullNativeTransactionDetails:
      type: object
      properties:
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        chainId:
          type: string
          description: The EVM chain ID on which the transaction occured.
          examples:
            - '43114'
        blockIndex:
          type: number
          description: The index at which the transaction occured in the block (0-indexed).
          examples:
            - 0
        txHash:
          type: string
          description: The transaction hash identifier.
          examples:
            - '0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4'
        txStatus:
          type: string
          description: >-
            The transaction status, which is either 0 (failed) or 1
            (successful).
          examples:
            - '1'
        txType:
          type: number
          description: The transaction type.
          examples:
            - 1
        gasLimit:
          type: string
          description: The gas limit set for the transaction.
          examples:
            - '51373'
        gasUsed:
          type: string
          description: The amount of gas used.
          examples:
            - '51373'
        gasPrice:
          type: string
          description: >-
            The gas price denominated by the number of decimals of the native
            token.
          examples:
            - '470000000000'
        nonce:
          type: string
          description: The nonce used by the sender of the transaction.
          examples:
            - '1'
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        method:
          $ref: '#/components/schemas/Method'
        value:
          type: string
          examples:
            - '10000000000000000000'
        input:
          type: string
          description: The data sent for the transaction.
        baseFeePerGas:
          type: string
        maxFeePerGas:
          type: string
        maxPriorityFeePerGas:
          type: string
      required:
        - blockNumber
        - blockTimestamp
        - blockHash
        - chainId
        - blockIndex
        - txHash
        - txStatus
        - txType
        - gasLimit
        - gasUsed
        - gasPrice
        - nonce
        - from
        - to
        - value
        - input
        - baseFeePerGas
    TransactionDirectionType:
      type: string
      enum:
        - SOURCE_TRANSACTION
        - DESTINATION_TRANSACTION
    TeleporterMessageInfo:
      type: object
      properties:
        teleporterMessageId:
          type: string
        direction:
          $ref: '#/components/schemas/TransactionDirectionType'
        sourceChainId:
          type: string
          description: >-
            chain id of the source chain. valid only for destination
            transactions
        destinationChainId:
          type: string
          description: >-
            chain id of the destination chain. valid only for source
            transactions
      required:
        - teleporterMessageId
        - direction
    GetTransactionResponse:
      type: object
      properties:
        erc20Transfers:
          description: The list of ERC-20 transfers.
          type: array
          items:
            $ref: '#/components/schemas/Erc20TransferDetails'
        erc721Transfers:
          description: The list of ERC-721 transfers.
          type: array
          items:
            $ref: '#/components/schemas/Erc721TransferDetails'
        erc1155Transfers:
          description: The list of ERC-1155 transfers.
          type: array
          items:
            $ref: '#/components/schemas/Erc1155TransferDetails'
        internalTransactions:
          description: >-
            The list of internal transactions. Note that this list only includes
            CALL and CALLCODE internal transactions that had a non-zero value
            and CREATE/CREATE2/CREATE3  calls. Use a client provider to recieve
            a full debug trace of the transaction.
          type: array
          items:
            $ref: '#/components/schemas/InternalTransactionDetails'
        networkTokenDetails:
          $ref: '#/components/schemas/NetworkTokenDetails'
        nativeTransaction:
          $ref: '#/components/schemas/FullNativeTransactionDetails'
        teleporterMessageInfo:
          description: Corresponding teleporter message info if available.
          allOf:
            - $ref: '#/components/schemas/TeleporterMessageInfo'
      required:
        - networkTokenDetails
        - nativeTransaction
    ImageAsset:
      type: object
      properties:
        assetId:
          type: string
        imageUri:
          type: string
          description: OUTPUT ONLY
    ResourceLinkType:
      type: string
      enum:
        - Blog
        - CoinGecko
        - CoinMarketCap
        - Discord
        - Documentation
        - Facebook
        - Github
        - Instagram
        - LinkedIn
        - Medium
        - Reddit
        - Support
        - Telegram
        - TikTok
        - Twitter
        - Website
        - Whitepaper
        - Youtube
    ResourceLink:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ResourceLinkType'
        url:
          type: string
      required:
        - type
        - url
    ContractDeploymentDetails:
      type: object
      properties:
        txHash:
          type: string
        deployerAddress:
          type: string
          description: >-
            The address that initiated the transaction which deployed this
            contract.
        deployerContractAddress:
          type: string
          description: >-
            The contract address which deployed this contract via smart
            contract. This field is only populated when the contract was
            deployed as part of smart contract execution.
      required:
        - txHash
        - deployerAddress
    UnknownContract:
      type: object
      properties:
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        description:
          type: string
        officialSite:
          type: string
        email:
          type: string
        logoAsset:
          $ref: '#/components/schemas/ImageAsset'
        bannerAsset:
          $ref: '#/components/schemas/ImageAsset'
        color:
          type: string
        resourceLinks:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLink'
        tags:
          type: array
          items:
            type: string
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        deploymentDetails:
          $ref: '#/components/schemas/ContractDeploymentDetails'
        ercType:
          type: string
          enum:
            - UNKNOWN
      required:
        - address
        - ercType
    PricingProviders:
      type: object
      properties:
        coingeckoCoinId:
          type: string
    Erc20Contract:
      type: object
      properties:
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        description:
          type: string
        officialSite:
          type: string
        email:
          type: string
        logoAsset:
          $ref: '#/components/schemas/ImageAsset'
        bannerAsset:
          $ref: '#/components/schemas/ImageAsset'
        color:
          type: string
        resourceLinks:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLink'
        tags:
          type: array
          items:
            type: string
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        deploymentDetails:
          $ref: '#/components/schemas/ContractDeploymentDetails'
        ercType:
          type: string
          enum:
            - ERC-20
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        decimals:
          type: number
          description: >-
            The number of decimals the token uses. For example `6`, means to
            divide the token amount by `1000000` to get its user representation.
          examples:
            - 18
        pricingProviders:
          $ref: '#/components/schemas/PricingProviders'
      required:
        - address
        - ercType
        - decimals
    Erc721Contract:
      type: object
      properties:
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        description:
          type: string
        officialSite:
          type: string
        email:
          type: string
        logoAsset:
          $ref: '#/components/schemas/ImageAsset'
        bannerAsset:
          $ref: '#/components/schemas/ImageAsset'
        color:
          type: string
        resourceLinks:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLink'
        tags:
          type: array
          items:
            type: string
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        deploymentDetails:
          $ref: '#/components/schemas/ContractDeploymentDetails'
        ercType:
          type: string
          enum:
            - ERC-721
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
      required:
        - address
        - ercType
    Erc1155Contract:
      type: object
      properties:
        name:
          type: string
          description: The contract name.
          examples:
            - Wrapped AVAX
        description:
          type: string
        officialSite:
          type: string
        email:
          type: string
        logoAsset:
          $ref: '#/components/schemas/ImageAsset'
        bannerAsset:
          $ref: '#/components/schemas/ImageAsset'
        color:
          type: string
        resourceLinks:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLink'
        tags:
          type: array
          items:
            type: string
        address:
          type: string
          description: A wallet or contract address in mixed-case checksum encoding.
          examples:
            - '0x71C7656EC7ab88b098defB751B7401B5f6d8976F'
        deploymentDetails:
          $ref: '#/components/schemas/ContractDeploymentDetails'
        ercType:
          type: string
          enum:
            - ERC-1155
        symbol:
          type: string
          description: The contract symbol.
          examples:
            - WAVAX
        pricingProviders:
          $ref: '#/components/schemas/PricingProviders'
      required:
        - address
        - ercType
    ListContractsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        contracts:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Erc721Contract'
              - $ref: '#/components/schemas/Erc1155Contract'
              - $ref: '#/components/schemas/Erc20Contract'
              - $ref: '#/components/schemas/UnknownContract'
            discriminator:
              propertyName: ercType
              mapping:
                ERC-721: '#/components/schemas/Erc721Contract'
                ERC-1155: '#/components/schemas/Erc1155Contract'
                ERC-20: '#/components/schemas/Erc20Contract'
                UNKNOWN: '#/components/schemas/UnknownContract'
      required:
        - contracts
    DataListChainsResponse:
      type: object
      properties:
        chains:
          type: array
          items:
            $ref: '#/components/schemas/ChainInfo'
      required:
        - chains
    ApiFeature:
      type: string
      enum:
        - nftIndexing
        - webhooks
        - teleporter
    ListChainsResponse:
      type: object
      properties:
        chains:
          type: array
          items:
            $ref: '#/components/schemas/ChainInfo'
      required:
        - chains
    GetChainResponse:
      type: object
      properties:
        chainId:
          type: string
        status:
          $ref: '#/components/schemas/ChainStatus'
        chainName:
          type: string
        description:
          type: string
        platformChainId:
          type: string
        subnetId:
          type: string
        vmId:
          type: string
        vmName:
          $ref: '#/components/schemas/VmName'
        explorerUrl:
          type: string
        rpcUrl:
          type: string
        wsUrl:
          type: string
        isTestnet:
          type: boolean
        utilityAddresses:
          $ref: '#/components/schemas/UtilityAddresses'
        networkToken:
          $ref: '#/components/schemas/NetworkToken'
        chainLogoUri:
          type: string
        private:
          type: boolean
        enabledFeatures:
          type: array
          items:
            type: string
            enum:
              - nftIndexing
              - webhooks
              - teleporter
      required:
        - chainId
        - status
        - chainName
        - description
        - vmName
        - rpcUrl
        - isTestnet
        - networkToken
    Erc20Transfer:
      type: object
      properties:
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        txHash:
          type: string
          description: The transaction hash identifier.
          examples:
            - '0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4'
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        logIndex:
          type: number
        value:
          type: string
          examples:
            - '10000000000000000000'
        erc20Token:
          $ref: '#/components/schemas/Erc20Token'
      required:
        - blockNumber
        - blockTimestamp
        - blockHash
        - txHash
        - from
        - to
        - logIndex
        - value
        - erc20Token
    Erc721Transfer:
      type: object
      properties:
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        txHash:
          type: string
          description: The transaction hash identifier.
          examples:
            - '0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4'
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        logIndex:
          type: number
        erc721Token:
          $ref: '#/components/schemas/Erc721Token'
      required:
        - blockNumber
        - blockTimestamp
        - blockHash
        - txHash
        - from
        - to
        - logIndex
        - erc721Token
    Erc1155Transfer:
      type: object
      properties:
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        txHash:
          type: string
          description: The transaction hash identifier.
          examples:
            - '0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4'
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        logIndex:
          type: number
        value:
          type: string
          examples:
            - '10000000000000000000'
        erc1155Token:
          $ref: '#/components/schemas/Erc1155Token'
      required:
        - blockNumber
        - blockTimestamp
        - blockHash
        - txHash
        - from
        - to
        - logIndex
        - value
        - erc1155Token
    ListTransfersResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transfers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Erc20Transfer'
              - $ref: '#/components/schemas/Erc721Transfer'
              - $ref: '#/components/schemas/Erc1155Transfer'
      required:
        - transfers
    TransactionDetails:
      type: object
      properties:
        nativeTransaction:
          description: The native (top-level) transaction details.
          allOf:
            - $ref: '#/components/schemas/NativeTransaction'
        erc20Transfers:
          description: The list of ERC-20 transfers.
          type: array
          items:
            $ref: '#/components/schemas/Erc20TransferDetails'
        erc721Transfers:
          description: The list of ERC-721 transfers.
          type: array
          items:
            $ref: '#/components/schemas/Erc721TransferDetails'
        erc1155Transfers:
          description: The list of ERC-1155 transfers.
          type: array
          items:
            $ref: '#/components/schemas/Erc1155TransferDetails'
        internalTransactions:
          description: >-
            The list of internal transactions. Note that this list only includes
            CALL and CALLCODE internal transactions that had a non-zero value
            and CREATE/CREATE2/CREATE3  calls. Use a client provider to recieve
            a full debug trace of the transaction.
          type: array
          items:
            $ref: '#/components/schemas/InternalTransactionDetails'
      required:
        - nativeTransaction
    ListTransactionDetailsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetails'
      required:
        - transactions
    ListErc20TransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Erc20Transfer'
      required:
        - transactions
    ListErc721TransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Erc721Transfer'
      required:
        - transactions
    ListErc1155TransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Erc1155Transfer'
      required:
        - transactions
    InternalTransaction:
      type: object
      properties:
        blockNumber:
          type: string
          description: The block number on the chain.
          examples:
            - '339'
        blockTimestamp:
          type: number
          description: The block finality timestamp.
          examples:
            - 1648672486
        blockHash:
          type: string
          description: The block hash identifier.
          examples:
            - '0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c'
        txHash:
          type: string
          description: The transaction hash identifier.
          examples:
            - '0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4'
        from:
          $ref: '#/components/schemas/RichAddress'
        to:
          $ref: '#/components/schemas/RichAddress'
        internalTxType:
          $ref: '#/components/schemas/InternalTransactionOpCall'
        value:
          type: string
          examples:
            - '10000000000000000000'
        isReverted:
          type: boolean
          description: True if the internal transaction was reverted.
        gasUsed:
          type: string
        gasLimit:
          type: string
      required:
        - blockNumber
        - blockTimestamp
        - blockHash
        - txHash
        - from
        - to
        - internalTxType
        - value
        - isReverted
        - gasUsed
        - gasLimit
    ListInternalTransactionsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `pageToken` to retrieve the next page.
            If this field is omitted or empty, there are no subsequent pages.
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/InternalTransaction'
      required:
        - transactions
  parameters:
    GlobalParamChainId:
      name: chainId
      in: path
      required: true
      description: A supported EVM chain id, chain alias, or blockchain id.
      schema:
        type: string
        examples:
          - '43114'
    GlobalParamNetwork:
      name: network
      in: path
      required: true
      description: A supported network type mainnet or testnet/fuji.
      schema:
        type: string
        examples:
          - mainnet
        enum:
          - mainnet
          - fuji
          - testnet
security:
  - apiKey: []
  - {}
x-speakeasy-retries:
  strategy: backoff
  backoff:
    initialInterval: 500
    maxInterval: 60000
    maxElapsedTime: 120000
    exponent: 1.5
  statusCodes:
    - 5XX
  retryConnectionErrors: true
x-speakeasy-globals:
  parameters:
    - $ref: '#/components/parameters/GlobalParamChainId'
    - $ref: '#/components/parameters/GlobalParamNetwork'
x-execution-weight-values:
  free: 1
  small: 10
  medium: 20
  large: 50
  xl: 100
  xxl: 200
x-rpc-method-execution-weights:
  eth_accounts: free
  eth_blockNumber: small
  eth_call: small
  eth_coinbase: small
  eth_chainId: free
  eth_gasPrice: small
  eth_getBalance: small
  eth_getBlockByHash: small
  eth_getBlockByNumber: small
  eth_getBlockTransactionCountByNumber: medium
  eth_getCode: medium
  eth_getLogs: xxl
  eth_getStorageAt: medium
  eth_getTransactionByBlockNumberAndIndex: medium
  eth_getTransactionByHash: small
  eth_getTransactionCount: small
  eth_getTransactionReceipt: small
  eth_signTransaction: medium
  eth_sendTransaction: medium
  eth_sign: medium
  eth_sendRawTransaction: small
  eth_syncing: free
  net_listening: free
  net_peerCount: medium
  net_version: free
  web3_clientVersion: small
  web3_sha3: small
  eth_newPendingTransactionFilter: medium
  eth_maxPriorityFeePerGas: small
  eth_baseFee: small
  rpc_modules: free
  eth_getChainConfig: small
  eth_feeConfig: small
  eth_getActivePrecompilesAt: small
x-speakeasy-webhooks:
  security:
    type: signature
    headerName: x-signature
    signatureTextEncoding: base64
    algorithm: hmac-sha256
webhooks:
  address_activity:
    post:
      description: >-
        Schema representing the webhook payload for address activity, sent to
        the callback URL.
      operationId: sendAddressActivityWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookAddressActivityResponse'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully