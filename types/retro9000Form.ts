import { z } from "zod"

export const jobRoles = [
  "CEO/Co-Founder",
  "CTO/Co-Founder",
  "Product Manager",
  "Engineering Manager",
  "Software Engineer",
  "Frontend Developer",
  "Backend Developer",
  "Full Stack Developer",
  "DevOps Engineer",
  "Data Scientist",
  "UI/UX Designer",
  "Marketing Manager",
  "Business Development",
  "Operations Manager",
  "Other",
]

export const countries = [
  "Afghanistan",
  "Albania",
  "Algeria",
  "Andorra",
  "Angola",
  "Argentina",
  "Armenia",
  "Australia",
  "Austria",
  "Azerbaijan",
  "Bahamas",
  "Bahrain",
  "Bangladesh",
  "Barbados",
  "Belarus",
  "Belgium",
  "Belize",
  "Benin",
  "Bhutan",
  "Bolivia",
  "Bosnia and Herzegovina",
  "Botswana",
  "Brazil",
  "Brunei",
  "Bulgaria",
  "Burkina Faso",
  "Burundi",
  "Cambodia",
  "Cameroon",
  "Canada",
  "Cape Verde",
  "Central African Republic",
  "Chad",
  "Chile",
  "China",
  "Colombia",
  "Comoros",
  "Congo",
  "Costa Rica",
  "Croatia",
  "Cuba",
  "Cyprus",
  "Czech Republic",
  "Democratic Republic of Congo",
  "Denmark",
  "Djibouti",
  "Dominica",
  "Dominican Republic",
  "East Timor",
  "Ecuador",
  "Egypt",
  "El Salvador",
  "Equatorial Guinea",
  "Eritrea",
  "Estonia",
  "Ethiopia",
  "Fiji",
  "Finland",
  "France",
  "Gabon",
  "Gambia",
  "Georgia",
  "Germany",
  "Ghana",
  "Greece",
  "Grenada",
  "Guatemala",
  "Guinea",
  "Guinea-Bissau",
  "Guyana",
  "Haiti",
  "Honduras",
  "Hungary",
  "Iceland",
  "India",
  "Indonesia",
  "Iran",
  "Iraq",
  "Ireland",
  "Israel",
  "Italy",
  "Ivory Coast",
  "Jamaica",
  "Japan",
  "Jordan",
  "Kazakhstan",
  "Kenya",
  "Kiribati",
  "Kuwait",
  "Kyrgyzstan",
  "Laos",
  "Latvia",
  "Lebanon",
  "Lesotho",
  "Liberia",
  "Libya",
  "Liechtenstein",
  "Lithuania",
  "Luxembourg",
  "Macedonia",
  "Madagascar",
  "Malawi",
  "Malaysia",
  "Maldives",
  "Mali",
  "Malta",
  "Marshall Islands",
  "Mauritania",
  "Mauritius",
  "Mexico",
  "Micronesia",
  "Moldova",
  "Monaco",
  "Mongolia",
  "Montenegro",
  "Morocco",
  "Mozambique",
  "Myanmar",
  "Namibia",
  "Nauru",
  "Nepal",
  "Netherlands",
  "New Zealand",
  "Nicaragua",
  "Niger",
  "Nigeria",
  "North Korea",
  "Norway",
  "Oman",
  "Pakistan",
  "Palau",
  "Panama",
  "Papua New Guinea",
  "Paraguay",
  "Peru",
  "Philippines",
  "Poland",
  "Portugal",
  "Qatar",
  "Romania",
  "Russia",
  "Rwanda",
  "Saint Kitts and Nevis",
  "Saint Lucia",
  "Saint Vincent and the Grenadines",
  "Samoa",
  "San Marino",
  "Sao Tome and Principe",
  "Saudi Arabia",
  "Senegal",
  "Serbia",
  "Seychelles",
  "Sierra Leone",
  "Singapore",
  "Slovakia",
  "Slovenia",
  "Solomon Islands",
  "Somalia",
  "South Africa",
  "South Korea",
  "South Sudan",
  "Spain",
  "Sri Lanka",
  "Sudan",
  "Suriname",
  "Swaziland",
  "Sweden",
  "Switzerland",
  "Syria",
  "Taiwan",
  "Tajikistan",
  "Tanzania",
  "Thailand",
  "Togo",
  "Tonga",
  "Trinidad and Tobago",
  "Tunisia",
  "Turkey",
  "Turkmenistan",
  "Tuvalu",
  "Uganda",
  "Ukraine",
  "United Arab Emirates",
  "United Kingdom",
  "United States",
  "Uruguay",
  "Uzbekistan",
  "Vanuatu",
  "Vatican City",
  "Venezuela",
  "Vietnam",
  "Yemen",
  "Zambia",
  "Zimbabwe"
]

export const continents = ["Africa", "Asia", "Australia", "Europe", "North America", "South America"]

export const projectVerticals = [
  "Validator Marketplaces",
  "Virtual Machines",
  "Wallets",
  "Oracles",
  "Interoperability Tools",
  "Cryptography",
  "Bridges",
  "Explorers",
  "RPCs",
  "Data Storage",
  "Indexers",
  "Token Engineering",
  "On & Offramps",
  "DeFi",
  "Gaming",
  "RWAs/Institutional",
  "Culture/NFTs",
  "Enterprise",
  "Exchanges/Wallets",
  "Payments",
  "AI",
  "Other",
]

export const avalancheFundingTypes = [
  "Codebase",
  "infraBUIDL()",
  "infraBUIDL(AI)",
  "Retro9000",
  "Blizzard",
  "Ava Labs Investment",
  "Other",
  "No",
]

export const nonAvalancheFundingTypes = [
  "No Funding",
  "Self-Funding",
  "Family & Friends",
  "Grant",
  "Angel Investment",
  "Pre-Seed",
  "Seed",
  "Series A",
]

export const formSchema = z.object({
  // Hidden field for project name
  project_name: z.string().default("Temporary"),
  
  project: z.string().min(1, "Project name is required"),
  project_type: z.string().min(1, "Project type is required"),
  project_vertical: z.string().optional(),
  project_vertical_other: z.string().optional(),
  project_abstract_objective: z.string().min(1, "Project abstract is required").max(300, "Maximum 300 words"),
  technical_roadmap: z.string().min(1, "Technical roadmap is required"),
  repositories_achievements: z
    .string()
    .min(1, "Repositories and achievements are required")
    .max(300, "Maximum 300 words"),
  risks_challenges: z.string().min(1, "Risks and challenges are required").max(300, "Maximum 300 words"),
  project_company_website: z.string().optional(),
  project_company_x_handle: z.string().optional(),
  project_company_github: z.string().min(1, "GitHub is required"),
  company_type: z.string().min(1, "Company type is required"),
  company_type_other: z.string().optional(),
  project_company_hq: z.string().min(1, "Company HQ is required"),
  project_company_continent: z.string().min(1, "Company continent is required"),
  project_company_logo: z.string().optional(),
  project_company_banner: z.string().optional(),
  media_kit: z.string().min(1, "Media kit is required"),

  previous_funding: z.array(z.string()).min(1, "Previous funding selection is required"),
  funding_amount_no_funding: z.string().optional(),
  funding_amount_self_funding: z.string().optional(),
  funding_amount_family_friends: z.string().optional(),
  funding_amount_grant: z.string().optional(),
  funding_amount_angel: z.string().optional(),
  funding_amount_pre_seed: z.string().optional(),
  funding_amount_seed: z.string().optional(),
  funding_amount_series_a: z.string().optional(),

  previous_avalanche_funding_grants: z.array(z.string()).min(1, "Previous Avalanche funding selection is required"),
  funding_amount_codebase: z.string().optional(),
  funding_amount_infrabuidl: z.string().optional(),
  funding_amount_infrabuidl_ai: z.string().optional(),
  funding_amount_retro9000: z.string().optional(),
  funding_amount_blizzard: z.string().optional(),
  funding_amount_avalabs: z.string().optional(),
  funding_amount_other_avalanche: z.string().optional(),

  requested_funding_range: z.string().min(1, "Requested funding range is required"),

  eligibility_and_metrics: z.string().min(1, "This field is required"),
  requested_grant_size_budget: z.string().min(1, "Grant size and budget is required"),
  previous_retro9000_funding: z.string().min(1, "Previous Retro9000 funding selection is required"),
  retro9000_previous_funding_amount: z.string().optional(),
  retro9000_changes: z.string().optional(),
  vc_fundraising_support_check: z.string().min(1, "VC fundraising support selection is required"),

  current_development_stage: z.string().min(1, "Development stage is required"),
  project_work_duration: z.string().min(1, "Project duration is required"),
  project_live_status: z.string().min(1, "Project live status is required"),
  multichain_check: z.string().min(1, "Multichain selection is required"),
  multichain_chains: z.string().optional(),
  first_build_avalanche: z.string().min(1, "First build Avalanche selection is required"),
  previous_avalanche_project_info: z.string().optional(),
  avalanche_contribution: z.string().min(1, "Avalanche contribution is required").max(200, "Maximum 200 words"),
  avalanche_benefit_check: z.string().min(1, "Avalanche benefit selection is required"),
  avalanche_l1_project_benefited_1_name: z.string().optional(),
  avalanche_l1_project_benefited_1_website: z.string().optional(),
  avalanche_l1_project_benefited_2_name: z.string().optional(),
  avalanche_l1_project_benefited_2_website: z.string().optional(),
  similar_project_check: z.string().min(1, "Similar project selection is required"),
  similar_project_name_1: z.string().optional(),
  similar_project_website_1: z.string().optional(),
  similar_project_name_2: z.string().optional(),
  similar_project_website_2: z.string().optional(),
  direct_competitor_check: z.string().min(1, "Direct competitor selection is required"),
  direct_competitor_1_name: z.string().optional(),
  direct_competitor_1_website: z.string().optional(),
  direct_competitor_2_name: z.string().optional(),
  direct_competitor_2_website: z.string().optional(),
  token_launch_avalanche_check: z.string().min(1, "Token launch selection is required"),
  token_launch_other_explanation: z.string().optional(),
  open_source_check: z.string().min(1, "Open source selection is required"),

  firstname: z.string().min(1, "First name is required"),
  lastname: z.string().min(1, "Last name is required"),
  applicant_job_role: z.string().min(1, "Job role is required"),
  applicant_job_role_other: z.string().optional(),
  email: z.string().email("Valid email is required"),
  x_account: z.string().min(1, "X account is required"),
  telegram: z.string().min(1, "Telegram is required"),
  linkedin: z.string().optional(),
  other_resources: z.string().optional(),
  applicant_bio: z.string().min(1, "Bio is required").max(100, "Maximum 100 words"),
  university_affiliation: z.string().min(1, "University affiliation is required"),

  team_size: z.string().min(1, "Team size is required"),
  team_member_1_first_name: z.string().optional(),
  team_member_1_last_name: z.string().optional(),
  team_member_1_email: z.string().optional(),
  job_role_team_member_1: z.string().optional(),
  team_member_1_x_account: z.string().optional(),
  team_member_1_telegram: z.string().optional(),
  team_member_1_linkedin: z.string().optional(),
  team_member_1_github: z.string().optional(),
  team_member_1_other: z.string().optional(),
  team_member_1_bio: z.string().optional(),
  team_member_2_first_name: z.string().optional(),
  team_member_2_last_name: z.string().optional(),
  team_member_2_email: z.string().optional(),
  job_role_team_member_2: z.string().optional(),
  team_member_2_x_account: z.string().optional(),
  team_member_2_telegram: z.string().optional(),
  team_member_2_linkedin: z.string().optional(),
  team_member_2_github: z.string().optional(),
  team_member_2_other: z.string().optional(),
  team_member_2_bio: z.string().optional(),

  avalanche_grant_source: z.string().min(1, "Grant source is required"),
  avalanche_grant_source_other: z.string().optional(),
  program_referral_check: z.string().min(1, "Referral selection is required"),
  program_referrer: z.string().optional(),

  kyb_willing: z.string().min(1, "KYB willingness is required"),
  gdpr: z.boolean().refine((val) => val === true, "You must agree to the privacy policy."),
  marketing_consent: z.boolean().optional(),
}).refine((data) => {
  if (data.previous_retro9000_funding === "Yes" && (!data.retro9000_previous_funding_amount || data.retro9000_previous_funding_amount.trim() === "")) {
    return false;
  }
  return true;
}, {
  message: "Previous funding amount is required when you have received Retro9000 funding",
  path: ["retro9000_previous_funding_amount"],
}).refine((data) => {
  if (data.first_build_avalanche === "No" && (!data.previous_avalanche_project_info || data.previous_avalanche_project_info.trim() === "")) {
    return false;
  }
  return true;
}, {
  message: "Previous Avalanche project information is required when this is not your first time building on Avalanche",
  path: ["previous_avalanche_project_info"],
}).refine((data) => {
  if (data.token_launch_avalanche_check === "No" && (!data.token_launch_other_explanation || data.token_launch_other_explanation.trim() === "")) {
    return false;
  }
  return true;
}, {
  message: "Please explain what chain(s) you will launch your token on and why",
  path: ["token_launch_other_explanation"],
}).refine((data) => {
  if (data.avalanche_benefit_check === "Yes" && (!data.avalanche_l1_project_benefited_1_name || data.avalanche_l1_project_benefited_1_name.trim() === "")) {
    return false;
  }
  return true;
}, {
  message: "Please provide at least one Avalanche project/L1 that would benefit",
  path: ["avalanche_l1_project_benefited_1_name"],
}).refine((data) => {
  if (data.similar_project_check === "Yes" && (!data.similar_project_name_1 || data.similar_project_name_1.trim() === "")) {
    return false;
  }
  return true;
}, {
  message: "Please provide at least one similar project",
  path: ["similar_project_name_1"],
}).refine((data) => {
  if (data.direct_competitor_check === "Yes" && (!data.direct_competitor_1_name || data.direct_competitor_1_name.trim() === "")) {
    return false;
  }
  return true;
}, {
  message: "Please provide at least one direct competitor",
  path: ["direct_competitor_1_name"],
}).refine((data) => {
  if (data.company_type === "Other" && (!data.company_type_other || data.company_type_other.trim() === "")) {
    return false;
  }
  return true;
}, {
  message: "Please specify your business classification",
  path: ["company_type_other"],
})
